

基于 FPGA 的数字实验指导书
（Cyclone4 Mini_FPGA 版本）
上海有擎科技有限公司
2019.06（Rev 2.0）
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
目 录
第一篇 MINI_FPGA 开发板的总体介绍 ..........................1
1.1 MINI_FPGA 开发板框架设计............................................................................................................1
1.2 核心 FPGA 芯片简介 ..........................................................................................................................2
1.2.1 Cyclone IV E 系列器件资源.................................................................................................2
1.2.2 Cyclone IV E 系列器件配置方式........................................................................................2
1.2.3 配置 MINI_FPGA 开发板............................................................................................................3
1.3 外围功能模块介绍.............................................................................................................................6
1.3.1 输入操作类模块 .........................................................................................................................7
1.3.2 输出显示类模块 .........................................................................................................................9
1.3.3 音频或发声类模块..................................................................................................................12
1.3.4 时钟模块....................................................................................................................................13
1.3.5 IO 拓展口模块..........................................................................................................................14
1.3.6 存储器类模块...........................................................................................................................14
1.3.7 协议接口类模块 ......................................................................................................................16
1.3.8 电源模块....................................................................................................................................17
1.4 如何在 Quartus 中新建工程.........................................................................................................17
1.5 如何使用 Altera 中的 IP 核生成 ROM 查找表.......................................................................34
1.6 如何使用 Altera 中的 IP 核生成 PLL（锁相环）模块........................................................40
1.7 如何使用 SignalTap........................................................................................................................43
1.8 如何使用 Altera 中的 IP 核生成低通滤波器..........................................................................49
第二篇 基础实验设计与实现.................................54
实验一 流水灯.........................................................................................................................................54
一、实验设计目标.............................................................................................................................54
二、实验设计思路.............................................................................................................................54
三、功能模块图与输入输出引脚说明.........................................................................................54
四、程序设计 ......................................................................................................................................55
五、FPGA 管脚配置............................................................................................................................55
六、实验结果 ......................................................................................................................................56
七、思考与拓展..................................................................................................................................56
实验二 集成逻辑门及其基本应用....................................................................................................57
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
实验 2.1 实现基本逻辑门功能 ......................................................................................................57
实验 2.2 利用门电路设计实现全加器功能 ...............................................................................60
实验三 译码器 编码器.........................................................................................................................64
实验 3.1 实现 3-8 译码器................................................................................................................64
实验 3.2 实现 8-3 优先编码器 ......................................................................................................68
实验四 数据选择器................................................................................................................................73
一、实验设计目标.............................................................................................................................73
二、实验设计思路.............................................................................................................................73
三、功能模块图与输入输出引脚说明.........................................................................................74
四、程序设计 ......................................................................................................................................75
五、FPGA 管脚配置............................................................................................................................76
六、实验结果 ......................................................................................................................................77
七、实验小结 ......................................................................................................................................77
实验五 触发器.........................................................................................................................................79
实验 5.1 使用门级结构描述 D 触发器.........................................................................................79
实验 5.2 使用行为描述语句实现 8D 触发器.............................................................................84
实验 5.3 实现 4JK 触发器................................................................................................................88
实验六 加法计数器................................................................................................................................93
一、实验设计目标.............................................................................................................................93
二、实验设计思路.............................................................................................................................93
三、功能模块图与输入输出引脚说明.........................................................................................93
四、程序设计 ......................................................................................................................................94
五、FPGA 管脚配置............................................................................................................................97
六、实验结果 ......................................................................................................................................97
七、思考与拓展..................................................................................................................................98
实验七 抢答器.........................................................................................................................................98
一、实验设计目标.............................................................................................................................98
二、实验设计思路.............................................................................................................................99
三、功能模块图与输入输出引脚说明.......................................................................................100
四、程序设计 ....................................................................................................................................101
五、FPGA 管脚配置..........................................................................................................................102
六、实验结果 ....................................................................................................................................103
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
七、思考与拓展................................................................................................................................104
实验八 功能数字钟..............................................................................................................................104
一、实验设计目标...........................................................................................................................104
二、实验设计思路...........................................................................................................................105
三、功能模块图与输入输出引脚说明.......................................................................................106
四、程序设计 ....................................................................................................................................107
五、FPGA 管脚配置..........................................................................................................................108
六、实验结果 ....................................................................................................................................108
七、思考与拓展................................................................................................................................109
第三篇 综合性实验设计与实现..............................110
实验一 PWM..............................................................................................................................................110
一、实验设计目标...........................................................................................................................110
二、实验设计思路...........................................................................................................................110
三、功能模块图与输入输出引脚说明.......................................................................................111
四、程序设计 ....................................................................................................................................113
五、FPGA 管脚配置..........................................................................................................................114
六、实验结果 ....................................................................................................................................115
七、思考与拓展................................................................................................................................115
实验二 DA 及 DDS..................................................................................................................................117
实验 2.1 DA 输出实验......................................................................................................................117
实验 2.2 DDS 实验 ............................................................................................................................122
实验三 AD................................................................................................................................................128
实验 3.1 AD 采样实验......................................................................................................................128
实验 3.2 时序分析实验..................................................................................................................135
实验四 UART 串行通信........................................................................................................................141
实验 4.1 UART 串口接收实验........................................................................................................141
实验 4.2 UART 串口发送实验........................................................................................................147
实验五 FIR 滤波器...............................................................................................................................153
一、实验设计目标...........................................................................................................................153
二、实验设计思路...........................................................................................................................153
三、功能模块图与输入输出引脚说明.......................................................................................154
四、程序设计 ....................................................................................................................................156
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
五、FPGA 管脚配置..........................................................................................................................156
六、实验结果 ....................................................................................................................................157
七、思考与拓展................................................................................................................................161
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
1
第一篇 MINI_FPGA 开发板的总体介绍
 本套数字系统实验平台是专门针对数字电路课程开发的，要求覆盖基础功能、
简单易用并拥有一定的扩展性，但不追求大而全，结合学校一线教学经验，我们
将开发板的核心芯片型号选定为 EP4CE6F17C8N；在外围功能模块的设计上，则以
简洁直观、小巧易携带为目标，主要包括以下几类模块：板载 USB-Blaster 电路，
实现一根线供电和调试；输出显示类的，如 LED 灯、数码管；输入操作类的，如
按键开关、拨动开关；发声及音频类的，如蜂鸣器；对外通信接口类的，如 UART
转 USB 接口；存储器类的，如 FLASH 存储器、EEPROM 存储器。
1.1 MINI_FPGA 开发板框架设计
MINI_FPGA 开发板的框架设计如图 1.1 所示，主要包括三个部分：
（1）核心 FPGA 芯片：选用 256 个管脚的 FPGA 芯片 Cyclone IV EP4CE6F17C8。
（2）外围设备。包含 LED 灯、数码管、蜂鸣器、按键开关、拨动开关、JTAG
接口和 UART 接口等；开发板的上方、下方和左方共有 76 个通用 IO 口，加上一定
的 GND 或 Power 通道；此外，为减少携带难度，开发板上还集成了下载器电路、
外扩存储器、电源与一个能产生 50MHz 时钟信号的晶体振荡器。
（3）USB 下载电缆。实现计算机与 MINI_FPGA 开发板之间的传输功能。
图 1.1 和图 1.2 分别是 MINI_FPGA 开发板的实物图的正面和反面。我们将在
1.2 节详细介绍 FPGA 芯片，在 1.3 节详细介绍各外围功能模块。
图 1.1 MINI_FPGA 开发板实物图正面
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
2
1.2 核心 FPGA 芯片简介
1.2.1 Cyclone IV E 系列器件资源
 Cyclone IV FPGA 系列展示了 Altera 在交付高功效 FPGA 上的领先优势。在
Cyclone III FPGA 基础上，对体系结构和硅片进行改进，采用高级半导体工艺技
术，并且为用户提供全面的功耗管理工具，Altera 由此将功耗降低了 25％。Cyclone
IV 系列具有以下特性：
（1） 低成本、低功耗的 FPGA 架构
（2） 6K 到 150K 的逻辑单元
（3） 高达 6.3Mb 的嵌入式存储器
（4） 高达 360 个 18×18 乘法器，实现 DSP 处理密集型应用
（5） 协议桥接应用，实现小于 1.5W 的总功耗
本实验平台选定芯片型号为 EP4CE6F17C8N，含 256 个管脚，6272 个逻辑单元，
采用 BGA 封装，具体芯片资源如图 1.3 所示。
所选芯片资源
图 1.3 Cyclone IV E 器件系列资源
1.2.2 Cyclone IV E 系列器件配置方式
Cyclone IV E 系列器件有主动串行 AS（Active Serial）、主动并行 AP（Active
Parallel）、被动串行 PS（Passive Serial ）、快速被动并行 FPP（Fast Passive
Parallel） 和 JTAG 这 5 种配置方式，使用时可根据需要选择其中一种或多种配
置方式，但每次配置 FPGA 时只能使用其中一种方式，不能同时使用多种方式。
图 1.7 是官方给出的 Cyclone IV E 系列的配置方式表。其中，主动模式是 FPGA
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
3
自动从外部存储器中读取配置数据存入 FPGA 内部，被动模式是由外部 MCU 提供配
置所需的时序，控制配置数据输入 FPGA 内；串行模式（1bit）与并行模式(8/16bit)
是根据配置 FPGA 时每个配置时钟周期所传输的配置数据位宽来划分的。JTAG 模式
是最简单、最常用的一种配置方式，配置优先级高于其他模式，从图 1.4 中注释
（2）（3）也可以看出，选择 JTAG 模式与配置方式选择引脚 MSEL 所设置的电平值
无关，而其他的模式选择都需通过设置 MSEL 来确定。
图 1.4 Cyclone IV E 器件配置表
在 MINI_FPGA 开发板中，由于只用到一片 FPGA 芯片，无需同时配合其他 FPGA
进行配置或控制，并且为了便于使用 JTAG 接口下载编译好的程序进行同时调试，
配置方式最终选择为 AS 模式与 JTAG 模式。
1.2.3 配置 MINI_FPGA 开发板
MINI_FPGA 开发板包含一个存储有 FPGA 芯片配置数据的串行闪存存储器芯片
（Serial Flash Memory）。每次开发板上电的时候，FPGA 芯片会自动从存储器中
加载配置数据。使用 Quartus II 软件，用户可以随时重新配置 FPGA，并可以改
变存储在非易失性 Serial Flash Memory 里面的数据。图 1.5 是 MINI_FPGA 开发
板的配置部分引脚电路图，选择 AS 模式与 JTAG 模式，与配置相关的 FPGA 引脚说
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
4
明如下：
（1）配置状态引脚——nSTATUS。其为双向引脚，在配置 FPGA 时，一旦其由
高电平转换为低电平就表示配置出错，需要重新配置 FPGA。
（2）配置控制引脚——nCONFIG。其为输入引脚，控制配置过程，在本设计中，
当 nCONFIG 从高电平转换为低电平时 FPGA 复位，当 nCONFIG 从低电平转换为高电

与外部Serial
Flash Memory连接
—JTAG配置专用引脚
—分别与JTAG插口的
 相应引脚连接
选择AS
模式
图 1.5 MINI_FPGA 的配置部分电路图
平时启动芯片配置，FPGA 主动从外部的 Serial Flash Memory（串行闪存存
储器）中读取配置数据并下载到 FPGA 内部，此即 AS 配置模式。
（3）配置状态完成引脚——CONF_DONE。其为双向引脚，用以显示配置状态是
否完成。在本设计中，当按下 MINI_FPGA 开发板上的 nCONFIG 键（按下时 nCONFIG
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
5
输入信号变为低电平）时，FPGA 复位，进入 AS 配置期间；当使用 JTAG 接口下载
编译好的配置数据进入 FPGA 内部时，FPGA 处于 JTAG 配置期间。如图 1.5 的①所
示，当处于配置前和配置期间时，FPGA 将 CONF_DONE 驱动为低电平，指示灯亮红
灯；当配置数据装载无误并进入初始化阶段后，FPGA 将 CONF_DONE 拉为高电平，
此时指示灯灭，配置完成。
（4）配置时钟引脚——DCLK。其为双向引脚，在本设计中，当使用 AS 配置模
式时，FPGA 通过此引脚与 Serial Flash Memory 连接，输出时钟并为 Serial Flash
Memory 提供配置时序；当使用 JTAG 配置时，FPGA 采用开发板上的晶振所提供的
时钟输入，输入管脚为 E1。
（5）配置使能引脚——nCE。其为输入引脚，低电平有效，在本设计中，通过
下拉电阻接地。
（6）配置模式选择引脚——MSEL。除 JTAG 模式外的其他模式的选择都通过此
引脚来确定，结合图 1.4，在 AS 配置模式下将 MSEL[3:0]设置为 0010，采用标准
上电复位延迟时间，配置数据电压标准为 3.3V。
（7）配置数据引脚——DATA。当使用串行配置模式时，FPGA 通过 DATAO 接收
配置数据。如图 1.17 所示, DATAO 与外部 Serial Flash Memory 的 DO/IO1 复用引
脚相连。
（8）边界扫描信号引脚——TMS、TCK、TDO、TDI。此为 JTAG 配置专用引脚，
具体说明如图 1.9 所示，分别为测试模式选择（TMS）、测试时钟（TCK）、测试数
据输出(TDO)和测试数据输入(TDI)这 4 个信号。在本设计中，须将这 4 个引脚分
别与 JTAG 插头的相应引脚连接，连接方式见图 1.20。此外，为使 FPGA 在正常工
作时 JTAG 接口能可靠地处于旁路状态，必须把 TMS 引脚上拉，把 TCK 引脚下拉，
把 TDI 引脚上拉。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
6
图 1.9 JTAG 配置专用管脚说明
AS 配置是 FPGA 配置方式中十分常用的方式，在此配置方式下，MINI_FPGA 需
与外部的 Serial Flash Memory（等同于 EPCS16）连接 DCLK、nCSO（片选信号输
出）、DATA0 和 ASDO（主动串行数据输出）这四个引脚，如图 1.17 所示。DCLK 引
脚给 Serial Flash Memory 提供时钟信号；nCSO 给 Serial Flash Memory 提供片
选信号；Serial Flash Memory 通过 DATA0 引脚给 FPGA 提供配置数据；ASDO 引脚
向 Serial Flash Memory 发送读/写命令和地址，以及当对 Serial Flash Memory
编程时用于写数据。
整个配置过程为：（1）当 FPGA 上电后，nCONFIG 信号由高电平转低电平使芯
片复位，随后再由低电平转高电平以启动芯片配置，配置方式为 AS 模式，FPGA 主
动从 Serial Flash Memory 中读取配置数据，当配置完成后，FPGA 进入初始化阶
段，随后进入用户模式；（2）当使用 JTAG 配置模式时，通过 JTAG 接口将编译好
的配置数据时下载至 FPGA 中，配置数据传输完成后，FPGA 正常工作，配置数据格
式为静态存储器对象文件（sof）格式,在此模式下，一旦 FPGA 掉电，其内部的配
置信息就会丢失；（3）当按下开发板上的复位键并放开后，nCONFIG 信号电平随之
变低后又变高，重复过程（1）。可以通过观察开发板正面的复位键旁的指示灯的
亮灭情况来判断是否配置完成，亮红灯时表明正在配置中。
1.3 外围功能模块介绍
在 FPGA 的芯片型号和配置方式确定后，就需定下开发板的外围功能模块的设
计方案，本 MINI_FPGA 开发板的外围功能模块包含操作类、显示类、音频类、外
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
7
部晶振时钟、IO 扩展口类、存储器类、协议接口类和电源这几个方面。下面将依
次对这几类做一个介绍。
1.3.1 输入操作类模块
此类模块主要用于向系统输入中断信号或操作信号，包含拨动开关和按键开
关。
(1)MINI_FPGA 开发板提供了 8 个按键开关 KEY7-KEY0 和一个复位键 RESET，如
图 1.10 所示。复位键 RESET 的一端接地，一端直接连接到 FPGA 的 nCONFIG 引脚,
当按键被按下时，向 FPGA 输入一个低电平，nCONFIG 置为“低”；当按键未被按下
时，nCONFIG 直接与上拉电阻相连，置为“高”。同理，按键开关 KEY7-KEY0 的一
端接地，另一端直接与 FPGA 的相应引脚连接，当按键被按下时向 FPGA 的相应引
脚输送低电平。
复位键
图 1.10 按键开关连接电路图
(2)MINI_FPGA 开发板上还有 8 个拨动开关 SW7-SW0，如图 1.11 所示。当拨动
开关处在 DOWN 位置（靠近开发板边缘）时向 FPGA 相应引脚输入低电平，当拨动
开关在 UP 位置时向 FPGA 相应引脚输入高电平。
表 1.1 和表 1.2 分别给出了按键开关和拨动开关的各个引脚连接信息。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
8
图 1.11 拨动开关连接电路图
表 1.1 按键开关引脚配置
信号名 FPGA 引脚号 说明
Key_In[0] J14 KEY0
Key_In[1] J16 KEY1
Key_In[2] J15 KEY2
Key_In[3] K16 KEY3
Key_In[4] K15 KEY4
Key_In[5] L15 KEY5
Key_In[6] L16 KEY6
Key_In[7] J13 KEY7
表 1.2 拨动开关引脚配置
信号名 FPGA 引脚号 说明
SW_In[0] R16 SW0
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
9
SW_In[1] P15 SW1
SW_In[2] P16 SW2
SW_In[3] N15 SW3
SW_In[4] N16 SW4
SW_In[5] M12 SW5
SW_In[6] N14 SW6
SW_In[7] N13 SW7

1.3.2 输出显示类模块
此类模块主要用于将实验结果通过指示灯或显示器表现出来，包含 LED 灯和数
码管。
（1）MINI_FPGA 开发板提供了 16 个直接由 FPGA 控制的 LED 灯 LED15-LED0，
每一个 LED 灯都由 FPGA 芯片的一个引脚直接驱动，如图 1.12 所示。当 FPGA 输出
高电平时 LED 灯点亮，反之则熄灭。表 1.3 给出了 LED 的各个引脚连接信息。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
10
图 1.12 LED 灯连接电路图
表 1.3 LED 引脚配置
信号名 FPGA 引脚号 说明
LED_Out[0] A5 LED0
LED_Out[1] B5 LED1
LED_Out[2] A4 LED2
LED_Out[3] B4 LED3
LED_Out[4] A3 LED4
LED_Out[5] B3 LED5
LED_Out[6] A2 LED6
LED_Out[7] C3 LED7
LED_Out[8] D15 LED8
LED_Out[9] D16 LED9
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
11
LED_Out[10] F15 LED10
LED_Out[11] F16 LED11
LED_Out[12] G15 LED12
LED_Out[13] G16 LED13
LED_Out[14] L13 LED14
LED_Out[15] L14 LED15
（2）MINI_FPGA 开发板上配有 6 个七段数码管 DIG1-DIG6(当正放 MINI_FPGA
开发板时，从左至右依次数过去)，每个数码管都由一个专用片选信号（DigCS1-
DigCS6）控制，如图 1.13 所示。七段数码管的每个引脚（共阴模式）均连接到 FPGA
DIG1 DIG2 DIG3 DIG4 DIG5 DIG6
七段数码管的引脚
Digitron_Out[0:7]
六个数码管的片选信号
引脚DigCS1-DigCS6
图 1.13 数码管连接电路图
芯片（Cyclone IV EP4CE6F17C8）上，当 FPGA 输出高电压时，对应的字码段点亮，
反之则熄灭。七段数码管的片选信号也直接与 FPGA 引脚相连，当 FPGA 输出低电
压时，对应的数码管选中，反之则不选中。表 1.4 给出了数码管的各个引脚连接
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
12
信息。
表 1.4 数码管引脚配置
信号名 FPGA 引脚号 说明
Digitron_Out[0] D9 字码段 A
Digitron_Out[1] E10 字码段 B
Digitron_Out[2] E8 字码段 C
Digitron_Out[3] D11 字码段 D
Digitron_Out[4] C8 字码段 E
Digitron_Out[5] D8 字码段 F
Digitron_Out[6] E9 字码段 G
Digitron_Out [7] C9 字码段 DP
DigitronCS_Out[0] C14 片选信号 DigCS6
DigitronCS_Out[1] D14 片选信号 DigCS5
DigitronCS_Out[2] G11 片选信号 DigCS4
DigitronCS_Out[3] F11 片选信号 DigCS3
DigitronCS_Out[4] C11 片选信号 DigCS2
DigitronCS_Out[5] D12 片选信号 DigCS1

1.3.3 音频或发声类模块
此类模块主要用于系统报警器或发声功能，包含一个无源蜂鸣器。
（1）MINI_FPGA 开发板上配有一个喇叭，经过功率放大电路后与 FPGA 的引脚
相连，如图 1.14 所示。当 FPGA 芯片输出低电平时，蜂鸣器发声，通过改变高低
电平翻转的频率可以调节蜂鸣器的发声频率。
表 1.5 给出了蜂鸣器的引脚连接信息。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
13
功率放大
喇
叭
图 1.14 蜂鸣器连接电路图
表 1.5 蜂鸣器引脚配置
信号名 FPGA 引脚号 说明
Buzzer_Out L3 蜂鸣器
1.3.4 时钟模块
MINI_FPGA 开发板上包含一个生成 50MH 频率时钟信号的晶体振荡器，如图 1.15
所示。该时钟信号直接与 FPGA 芯片引脚相连，用来驱动 FPGA 内部的用户逻辑电
路。表 1.6 给出了时钟信号的引脚连接信息。
50MHz
图 1.15 晶体振荡器连接电路图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
14
表 1.6 时钟信号引脚配置
信号名 FPGA 引脚号 说明
CLK E1 50 MHz clock input
1.3.5 IO 拓展口模块
此类模块主要用于向系统输入信号或输出由系统产生的信号。
（1）MINI_FPGA 开发板上提供了一个 40 引脚的 IO 接口模块 J7 和两个 24 引
脚的 IO 接口模块 P1、P2，如图 1.16 所示。J7 模块中有 36 个引脚直接连接到 FPGA
芯片 Cyclone IV EP4CE6F17C8，并提供 Vbus 和 3.3V 电压引脚和两个接地引脚，
其中 Vbus 是由 USB 总线传送的 5V 电压；P1 模块中有 21 个引脚直接连接到 FPGA
芯片，并提供 3.3V、VBUS 电压引脚和接地引脚；P2 结构与 P1 相同。
图 1.16 通用 IO 口引脚连接电路图

1.3.6 存储器类模块
存储器主要用于嵌入式开发和数据存储等需要，常用的存储器一般分为 RAM
（Random Access Memory）类和 ROM（Read Only Memory）类。RAM 类主要是以 SDRAM
和 SRAM 技术为基础的随机存取存储器，访问速度快，掉电丢失数据，通常被用作
系统缓存或内存；ROM 类主要是以 FLASH 技术和 EEPROM（Electrically Erasable
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
15
Programmable Read Only Memory）为主的可编程只读存储器，掉电不丢失数据，
通常被用于系统数据存储器或程序存储器。
（1）MINI_FPGA 开发板上提供了一个串行闪存存储器芯片（Serial Flash
Memory），用于存储 FPGA 芯片上电后的配置数据，如图 1.17 所示。该 FLASH 存储
图 1.17 Serial Flash Memory 连接电路图
器的 CLK 信号、CS 信号、DO 信号、DI 信号分别与 FPGA 芯片的配置相关引脚连接，
在 3.2.3 节已经介绍过，这里就不再赘述。
（2）MINI_FPGA 开发板上配有一片 I2C 协议接口的 EEPROM 芯片，如图 1.18
所示。EEPROM 是电可擦除可编程存储器，该芯片的 SCL 与 SDA 引脚分别与 FPGA 芯
片的管脚 R14 与 T15 相连，可用作系统程序类存储器。
s
图 1.18 EEPROM 连接电路图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
16
1.3.7 UART 通信模块
MINI_FPGA 开发板上集成了一个 UART 转 USB 的转接电路，如图 1.21 所示。
这使得 FPGA 板卡与 PC 机进行数据交互变得简单，直接使用 USB 数据线将 PC 机与
开发板上的 UART2USB 接口（见图 1.1）相连，USB 数据经过此电路后转化为 UART
协议的形式进入 FPGA 中。需要注意的是，图 1.21 中的 TXD 引脚是由该电路向 FPGA
芯片发送 UART 协议的数据，RXD 引脚是由该电路接收由 FPGA 芯片向外部发送的
UART 协议的数据，在配置引脚时需搞清数据传输方向。表 1.7 给出了进行 UART 通
信实验时 FPGA 的引脚连接信息。
图 1.21 USB 转 UART 连接电路图
表 1.7 UART 通信引脚配置
信号名 FPGA 引脚号 说明
RX_In F14 FPGA 接收外部数据
TX_Out F13 FPGA 向外部发送数据

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
17
1.3.8 电源模块
USB 的电缆内有四根线，两根传送的是差分对的数据，另外两根传送的是 5V
的电压，当外围设备的功率不大时可以直接通过 USB 总线供电，而不必再外接电
源。为减少携带难度，MINI_FPGA 上直接集成了电源电路，如图 1.22 所示。Vbus
是由 USB 总线传送的 5V 电压,使用开关电源 RT8059，经过电路降压后产生了 3.3V、
2.5V 和 1.2V 的电源。
图 1.22 电源部分电路图

1.4 如何在 Quartus 中新建工程
以下是在 Quartus 中建立流水灯工程并下载到 MINI_FPGA 开发板中验证的全过
程：
1、新建工程。如图 1.23 所示，打开 Quartus Ⅱ然后点击红圈处的按钮，即
可新建一个工程。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
18
图 1.23 新建工程
2、确定工程名。如图 1.24 所示，在打开的对话框中分别选择工程路径，工程
名字，工程顶层设计的名字。这里我的工程路径是 E:\MINI_FPGA\run_led，这里
需要注意的是 Quartus 的路径中不能出现中文名，在选择路径时可以自行创建文
件夹。接下来的工程名和顶层文件名取 run_led，然后点击“Next”。
图 1.24 建立工程名
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
19
3、添加已有的设计文件。如图 1.25 所示，这一步是添加现有的设计文件，目
前没有设计文件，直接跳过去，直接点击“Next”。
图 1.25 添加已有的设计文件
4、选择器件型号。如图 1.26 所示，这一步是对器件进行选型，选择芯片型号
为 EP4CE6F17C8,然后点击“Next”。
图 1.26 选择器件型号
5、选择 EDA 工具。如图 1.27 所示，EDA 工具只选择 simulation 工具，这里
选择 Modelsim-Altera，编程语言选择 Verilog HDL。然后点击“Next”。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
20
图 1.27 选择 EDA 工具
6、然后点击“Next”，最后点击“Finish”。
7、新建顶层文件。完成上面的步骤后，下面开始 run_led 模块的 Verilog 设
计。如图 1.28 所示，在 Quartus Ⅱ的主界面点击左上角的新建按钮，然后选择新
建一个 verilog 文件。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
21
图 1.28 新建顶层文件
8、设计顶层文件。在新建好的文件中键入如下图 1.29 代码，保存为
run_led.v，注意保存时的文件名要和 module 的名字一样。此模块即为顶层模块，
一般在顶层模块中只写例化模块。
图 1.29 新建顶层文件
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
22
9、设计底层模块。重复步骤 7，新建一个文件，在新建的文件中键入如下图
1.30 代码，保存为 led8_module.v，底层文件保存时文件名不必和 module 的名字
一样。
图 1.30 设计底层模块
10、预编译。在 Quartus Ⅱ的主界面上点击如下图 1.31 中的预编译按钮，如
果没有问题的话，会出现如下图 1.32 的对话框，点击 OK。
图 1.31 预编译按钮
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
23
图 1.32 预编译对话框
11、利用 Quartus Ⅱ的生成例化工具生成例化文件。如图 1.33 所示，选中
led8_module.v 文件，点击红圈处生成 Verilog 语言的例化文件，生成的例化文件
命名规则是在原有的文件名加上_inst，本例中的是 led8_module_inst.v。
图 1.33 生成例化文件
12、调用例化元件。如图 1.34 所示，打开例化文件，并将例化接口（见图 1.35）
复制粘贴到 run_led.v 文件中。然后进行例化元件名的改写和接口的连接，如图
1.36 所示，注意名字的大小写和数据位宽。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
24
图 1.18 调用例化元件
图 1.35 例化元件接口
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
25
例化元件名
接口连接 自行添加的注释，
用于说明信号的输入
或输出走向
图 1.36 例化元件名的改写和接口的连接

13、重复步骤 10，调试至没有错误。
14、设置管脚状态。为保证能得到正常的现象，需要将没有用到的芯片管脚
设置为三态输入，同时将复用的管脚设置为普通 IO 口。如下图 1.37-1.41 所示，
依次点击红圈中的按钮，将 Unused Pins 设置为 As input tri-stated；将
Dual-Purpose Pins 设置为 Use as regular I/0，点击 OK，然后再点击 OK。
图 1.37 设置管脚状态
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
26
图 1.38 设置管脚状态
图 1.39 设置管脚状态
图 1.40 设置管脚状态
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
27
图 1.41 设置管脚状态
15、连接 FPGA 的管脚。如图 1.42 所示，点击红圈中的按钮，打开 Pin Planner，
管脚的配置信息。
下面介绍如何通过查找 MINI_FPGA 开发板管脚图自行配置管脚。例如，在配置
CLK 信号的管脚时，首先明确 CLK 是系统的时钟输入信号，通过查看第一篇中
MINI_FPGA 开发板的电路图 1.15，或直接查看第一篇的表 1.6，找到时钟信号；开
发板上的时钟晶振是 50Mhz 的，通过连线 E1 连接到 FPGA 芯片上，因此我们将 CLK
信号的 Location 一栏设置为 E1。双击 Pin Planner 面板上 CLK 信号所对应的
Location，输入 e1（大小写均可），回车。再依例设置其他信号的管脚。
图 1.42 连接 FPGA 的管脚
16、安装 USB-Blaster 的驱动。右键桌面图标“计算机”，点击“属性”，打
开“设备管理器”；如图 1.43 所示，右键“通用串行总线控制器”，点击“扫描检
测硬件改动”；如图 1.44 所示，在“其他设备”中出现“USB-Blaster”，右键
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
28
“USB-Blaster”，点击“更新驱动程序软件”；如图 1.45 所示，选择“浏览计算
机以查找驱动程序软件”；如图 1.46 所示，点击“浏览”，在 Quartus 软件安装目
录下选择“drivers”文件夹即可，点击“确定”，并勾选“包括子文件夹”，点击
“下一步”；若出现下图 1.47 中对话框则表明驱动安装成功。
图 1.43 安装 USB-Blaster 的驱动
图 1.44 “其他设备”中出现“USB-Blaster”
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
29
图 1.45 浏览计算机以查找驱动程序软件
图 1.46 选择“drivers”文件夹
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
30
图 1.47 驱动安装成功
17、编译程序。点击下图 1.48 中的红圈按钮，进行全编译；若编译成功，则
出现下图 1.49 中对话框；
图 1.48 编译程序
图 1.49 编译成功
18、下载程序至 MINI_FPGA 开发板中。使用 USB 数据线连接计算机和 MINI_FPGA
开发板，点击下图 1.50 中红圈中按钮，下载程序；如图 1.51 所示，在弹出的对
话框中单击“Hardware Setup”打开“Hardware Setup”对话框；如图 1.52 所示，
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
31
如果 USB-Blaster 的硬件驱动更新成功就可以看到其中出现了 USB-Blaster，点
击下拉箭头，选择 USB-Blaster[USB-0]，点击“close”；如图 1.53 所示，模式选
择 JTAG；若面板中已自动加载文件则可直接点击“Start”按钮开始烧录，若没有
文件，可自行添加，如图 1.54 所示，点击“Add File”，打开面板，进入
“output_files”文件夹；如图 1.55 所示，选中.sof 文件，点击“Open”，再点
击“Start”，即开始程序的烧录；
图 1.50 下载程序

图 1.51 “Hardware Setup”对话框
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
32
如果USB-Blaster的硬件驱动更新成功，并且连接了
MINI_FPGA开发板，就可以看到出现了USB-Blaster
图 1.52 USB-Blaster
图 1.53 模式选择 JTAG
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
33
图 1.54 加载文件
图 1.55 选择

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
34
1.5 如何使用 Altera 中的 IP 核生成 ROM 查找表
在 Quartus 中使用 IP 核生成 ROM 查找表，首先需使用其它工具生成 IP 核的设
计文件，此处以“正弦波的 ROM 查找表”为例。
首先，使用 Matlab 产生一个 12 位地址宽度 8 位数据宽度的正弦波查找表，程
序如下：
1、如图 2.15 所示，打开 Matlab，点击红圈处的按钮，新建脚本。
图 2.15
2、在新建的脚本中输入图 2.16 中的代码，并将脚本保存为“DDS_sin.m”文
件，文件名可自定,存放路径自行选择，如图 2.17 所示。
3、点击在图 2.18 中的红圈处的按钮，运行“DDS_SIN.m”文件。若出现了图
2.19 中的对话框，则选择“更改文件夹”。
4、运行成功后，在“DDS_SIN.m”文件的保存路径下，出现“sinrom1.mif”
文件，如图 2.20 所示。
图 2.16
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
35
图 2.17
图 2.18
图 2.19
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
36
图 2.20
将产生的 sinrom1 文件添加到 DDS 工程文件夹里面，调用 Altera 的 IP 核来建
立一个 ROM 查找表，步骤如下：
5、打开 quartus 中的 Ip 核管理器。如图 2.21 所示。
6、选择“Create a new custom megafunction variation”，点击下一步。如
图 2.22 所示。
图 2.21
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
37
图 2.22

7、在弹出来的 IP 核管理器中打开 Memory 文件夹，并选择单口 ROM，命名为
dds_sin_rom。如图 2.23 所示。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
38
图 2.23
8、点击 Next 进入单口 ROM IP 核参数设置界面。选择输出为 8 位，ROM 大小
为 4096（之前使用 matlab 生成的 ROM 表就是 8 位数据，12 位的地址宽度），然后
点击 Next。如图 2.24 所示。
图 2.24
9、接下来选择是否带触发器，只勾选‘q’output port，然后 Next。如图 2.25
所示。
图 2.25
10、对 ROM 进行初始化。将之前使用 matlab 生成的 mif 文件拷贝到 DDS 工程
目录下，然后在 ROM 的参数设置界面中，点击 Browse 选择 sinrom1.mif 文件。如
图 2.26 所示，选择完成后，直接点击 Finish。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
39
图 2.26
11、在最后的 Summary 界面中，勾选 dds_sin_rom_inst.v 选项，生成 rom 的
例化文件。如图 2.27 所示。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
40
图 2.27
这样便生成了正弦 ROM 查找表的例化文件。调用该例化元件的方法与第二篇的
实验一中介绍的方法相同，直接打开生成的例化文件，复制代码后改写接口即可。
1.6 如何使用 Altera 中的 IP 核生成 PLL（锁相环）模块
本节实验中 SignalTap 的工作时钟选择 100KHz，该时钟信号直接由 IP 核生成
的 PLL 模块产生，使用 IP 核生成 PLL 模块的步骤参照实验 2.2 中的“八”，这里
简单介绍下相关参数的设置。
1、在弹出来的 IP 核管理器中打开 I/O 文件夹，并选择 ALTPLL，命名为
pll_100K。如图 3.10 所示。
图 3.10
2、点击 Next 进入 ALTPLL IP 核参数设置界面。选择输入时钟的频率为 50MHz。
如图 3.11 所示。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
41
图 3.11
3、接下来选择输入输出信号，全部不勾选，然后 Next。如图 3.12 所示。
图 3.12

4、连续点击 Next，保留默认设置，在“page 8 of 14”页中设置输出时钟的
频率为 100KHz。如图 3.13 所示，选择完成后，直接点击 Finish。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
42
图 3.13

5、在最后的 Summary 界面中，勾选 dds_sin_rom_inst.v 选项，生成 PLL 的例
化文件。如图 3.14 所示。最后点击 Finish。
图 3.14

这样便生成了 PLL 模块的例化文件。调用该例化元件的方法与一般方法相同。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
43
1.7 如何使用 SignalTap
本节实验中使用 Quartus 自带的 SignalTap（逻辑分析仪）进行时序分析，过
程如下：
1、打开逻辑分析仪。操作步骤如图 3.15 所示。
图 3.15
2、SignalTap 的主界面如图 3.16 所示，其中状态控制区用来控制逻辑分析仪
的运行和暂停等，信号区是需要添加的信号要显示的区域，时钟及采样深度设置
区用来设置时钟和采样的深度，高级触发功能区用来设置一些高级的触发功能。
3、打开逻辑分析仪后，第一个需要设置的是时钟，本节实验中采用 PLL 模块
产生的100KHz的时钟信号。如图3.17所示，点击时钟右侧的按钮，弹出Node Finder
对话框。
4、如图 3.18 所示，在弹出的 NodeFinder 对话框中，Filter 选项中选择为
SignalTap II：pre-synthesis，即选择综合前，更符合原始设计文件，因为综合
会对设计进行优化，有些想要观察的信号就会被优化掉，所以推荐使用综合前。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
44
信号区
下载设置区
时钟采样及 深度设置区
高级触发区
状态控制区
图 3.16

图 3.17

图 3.18
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
45
 5、点击图 3.18 中右上角的 List 按钮，在 Nodes Found 框里出现模块中可以
添加的信号量（一般包括模块的接口，寄存器，以及包含的子模块等）。此处是为
SignalTap 添加工作时钟，使用 pll_100K 模块的输出信号 c0，所以在 Nodes Found
框中选择 c0，然后双击或者按照图 3.19 的步骤将信号添加进来，然后点击完成即
可完成时钟的添加。



图 3.19

6、左键单击信号框中的空白区域，在弹出的 Node Finder 中选择要添加的信
号，本节实验关心的是 AD_Data 模块中的信号，所以可以在 Look in 中选择 AD_Data
层次，然后点击 List 按钮，则在 Nodes Found 框中显示的只有 AD_Data 层次中的
信号。操作步骤如图 3.20 所示。
7、参照步骤 5，将 Data_Out 等信号添加进入，点击 OK。如图 3.21 所示。
8、采样深度设置为 2K。然后保存 stp1.stp 文件（文件名可自定）。然后在出
现的对话框中选择 yes，将 stp1 添加到工程中来。如图 3.22 所示。随后进行全
编译。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
46


图 3.20
图 3.21
图 3.22
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
47
9、编译完成后，打开 SignalTap 界面，在下载区配置 Usb-Blaste。操作步
骤如图 3.23 所示。



图 3.23
10、如图 3.24 所示，获取 Device 信息，需要先将板子上电。
图 3.24

11、获取 Sof 文件信息，如图 3.25 所示，点击红圈中按钮，选择 Sof 文件。
选择成功后的下载区如图 3.26 所示。
图 3.25 图 3.26

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
48
12、点击下载按钮进行下载，如图 3.27 所示。下载完成后，点击左上角状态
控制区的图标运行 SignalTap，如图 3.28 所示。接下来便可以看到信号在不断地
进行跳变。
图 3.27
图 3.28
13、对于一个信号可以以多种方式进行显示，以 Data_Out 信号为例，选中
Data_Out 信号，然后右键，出现信号的显示类型的选择菜单。常用的有 Hexadecimal
（十六进制显示）、Unsigned Decimal(无符号十进制)、Binary（二进制）、Unsigned
Line Char（无符号线表显示）、Signed Line Char（有符号线表显示）。本实验中
Data_Out 信号的八位数据为无符号型的，选择 Unsigned Line Char，如图 3.29
所示，便可看到 Data_Out 信号呈正弦波显示。
SignalTap 的其他功能请同学们参照指导书自行探索。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
49
图 3.29
1.8 如何使用 Altera 中的 IP 核生成低通滤波器
本节实验中使用 IP 核来设置 FIR 低通滤波器，此处简单介绍下相关参数的设
置步骤。
1、打开 IP 核管理器，打开方法参照实验 2.2 中的“八”。
2、在弹出来的 IP 核管理器中打开 DSP 文件夹，并选择 FIR Compiler,命名为
low_pass_filter1。如图 5.16 所示。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
50
图 5.16
2、在弹出的对话框中选择 Parameterize，进入 FIR IP 核参数设置界面。如
图 5.17 所示。
图 5.17
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
51
3、点击红圈处的按钮。如图 5.18 所示。
图 5.18
4、按图 5.19 所示步骤，依次设置“滤波器类型、窗口类型、阶数、采样率、
截止频率”。本实验选择“低通滤波器、汉明窗、阶数 50、50KHz 的采样率、10KHz
的截止频率”。设置完成后，点击 Apply，最后点击 Ok。





图 5.19
5、如图 5.20 所示，指定“输入输出规范、系数规范、器件规范”。本实验选
择：①无符号二进制输入；②输入位宽为 8 位（送入滤波器的数据为 8 位）；③自
定义饱和度且输出位宽为 23 位；④系数拓展选择“Auto”且系数位宽为 12 位；
⑤器件类型；⑥Pipeline Level 选择 1。设置完成后，点击 Finish。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
52
图 5.20

6、在弹出的对话框中选择 Generate，生成滤波器。如图 5.21 所示。

图 5.21
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
53
7、出现图 5.22 中红框中内容则表明滤波器设置成功，点击 Exit 退出界面即
可。FIR 模块的例化元件的调用方法与一般方法相同。

图 5.22

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
54
第二篇 基础实验设计与实现
实验一 流水灯
一、实验设计目标
 （1）通过编程轮流点亮 8 个 LED 灯，形成流水灯效果。
（2）通过此实验熟练掌握在 Quartus Ⅱ中新建工程的方法。
二、实验设计思路
 第一篇中的 1.3.2 节已经介绍到，LED 灯为高电平驱动点亮，即输出“1”为
点亮，输出“0”为熄灭，所以流水灯的实质就是“1”的流动，在寄存器内存储
“0000_0001”这样一组数据，其中 LSB(最低有效位)为“0”，随着每一次流水灯
工作时钟的到来，整组数据循环右移一次，这样便实现了数据“1”从左向右的流
水效果，通过 I/O 口将寄存器的值输送到 LED 显示出来，这样便实现了从左向右
的流水灯效果。
三、功能模块图与输入输出引脚说明
流水灯工程包含顶层模块 run_led 与底层模块 led8_module，图 1.1 是使用
Quartus 生成的顶层文件的 BSF 图，图 1.2 是整个工程的模块功能图。下面介绍一
下各主要引脚的功能：
流水灯效果实现模块
run_led.v
led8_module.v
CLK
RSTn
LED_Out[7:0]
图 1.1 流水灯顶层文件 BSF 图 图 1.2 流水灯模块功能图
（1）CLK：50MHz 的系统基准时钟输入。将其 5000000 分频可得到频率为 10HZ
的流水灯工作频率，即每隔 0.1 秒，流水灯效果变换一次。
（2）RSTn：系统复位输入信号，低电平有效。复位后系统回到初始状态，内
部计数器归零，LED7~LED1 熄灭，LED0 点亮。
（3）LED_Out：输出到 LED 灯，共有八位总线。当系统处于工作状态时，
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
55
LED_Out[7:0]的值每隔 0.1 秒循环右移一位。
四、程序设计
图 1.3 是截取自底层模块 led8_module 的部分代码：
10-12：参数及寄存器型信号声明。
15-19：复位状态描述语句，复位后计数器 Count 归零，rLED_Out 为“00000000”。
20-22，28-29：这是一个计数器，当系统基准时钟 CLK 出现一个上升沿时，Count
计数加 1，当 Count 计数到 4999999 时，它将在 CLK 的下一个上升沿处置零。目的
是产生一个 10Hz 的控制时钟，控制流水灯效果的变换时间。
25-26：这是本次实验的重要程序，通过循环右移语句控制“1”在 rLED_Out
的 8 位数据间从左至右移动。
图 1.3 流水灯实验核心代码
五、FPGA 管脚配置
图 1.4 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号与
MINI_FPGA 开发板上的 50MHz 的晶振时钟相连；LED_Out[7:0]输出信号分别与开发
板上的 LED7~LED0 相连；RSTn 复位输入信号与开发板上的 SWO 相连，当 SW0 拨至
DOWN 时，系统复位。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里
就不再赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
56
图 1.4 流水灯 Pin Planner

六、实验结果
复位信号 RSTn 接拨动开关 SW0，当 SW0 拨至“DOWN”位置时，系统复位，开
发板上开关 SW0 的指示灯熄灭，LED0 点亮，LED7~LED1 熄灭，实验现象如图 1.5
所示；当 SWO 拨至“UP”位置时，开发板上开关 SW0 的指示灯亮，LED7~LED0 呈流
水灯效果从左至右依次点亮，图 1.6 是单次流水灯现象，具体动态现象请自行观
察。
图 1.5

七、思考与拓展
（1）图 1.3 中 23-24 行代码的含义是什么？这样设计有什么好处？
（2）请通过调整程序中的参数来调整流水灯变换的速度，实现 1 秒钟变换一
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
57
个灯的效果。
图 1.6
实验二 集成逻辑门及其基本应用
实验 2.1 实现基本逻辑门功能
一、实验设计目标
在 FPGA 中实现基本逻辑门并验证其功能。
二、实验设计思路
本实验涉及到的基本逻辑门有“与门”、“与非门”、“或门”、“或非门”、“异或
门”和“同或门”，功能简单，实验时使用 2 个拨动开关模拟逻辑门的输入信号，
通过 LED 灯的点亮或熄灭来验证逻辑门的功能。
三、功能模块图与输入输出引脚说明
逻辑门工程包含顶层模块 gate 与底层模块 Gate_module，图 2.1 是使用
Quartus 生成的顶层文件的 BSF 图，图 2.2 是整个工程的模块功能图。下面介绍一
下各主要引脚的功能：
（1）SW_In：拨动开关输入，共有两位总线。SW_In[1]和 SW_In[0]分别连接
“两输入逻辑门”的输入信号。
（2）LED_Out：输出到 LED 灯，共有六位总线。LED_Out[5:0]分别连接“同或
门”、“异或门”、“或非门”、“或门”、“与非门”和“与门”的输出，通过 LED 灯
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
58
的点亮或熄灭来表示逻辑门输出的“高”和“低”电平。
图 2.1 逻辑门顶层文件 BSF 图
逻辑门效果
实现模块
gate.v
Gate_module.v
SW_In[1:0] Gate_In[1:0] Gate_Out[5:0] LED_Out[5:0]
图 2.2 逻辑门模块功能图
四、程序设计
图 2.3 是截取自底层模块 Gate_module 的部分代码：
图 2.3 逻辑门实验核心代码
6-7：输入输出信号声明。
11-16：这是本次实验的重要程序，11-16 行依次实现“与门”、“与非门”、“或
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
59
门”、“或非门”、“异或门”和“同或门”功能。
五、FPGA 管脚配置
图 2.4 是使用 Quartus 生成的 Pin Planner 管脚图，SW_In[1:0]输入信号分别
与 MINI_FPGA 开发板上的 SW1 和 SW0 相连；LED_Out[5:0]输出信号分别与开发板
上的 LED5~LED0 相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这
里就不再赘述。
六、实验结果
图 2.5 是当 SW1 与 SW0 分别拨至“UP”和“DOWN”位置时的实验现象。当逻辑
门两输入分别为“1”和“0”时，“与门”、“与非门”、“或门”、“或非门”、“异
图 2.4 逻辑门实验 Pin Planner

或门”和“同或门”输出分别为“0、1、1、0、1、0”，即 LED_Out[0]~ LED_Out[5]
分别为“0、1、1、0、1、0”，则 LED0~LED5 分别为“灭、亮、亮、灭、亮、灭”，
如图 2.5 所示。因篇幅有限，其他情况请自行验证。

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
60
图 2.5 逻辑门实验结果
实验 2.2 利用门电路设计实现全加器功能
一、实验设计目标
（1）利用门电路设计实现全加器功能。
（2）通过此实验初步掌握连续赋值语句——assign 语句的使用方法。
二、实验设计思路
在电路中，算术运算中的加减乘除运算，往往是分解转化为加法运算，因此，
加法器是运算电路的核心。在做二进制的加法时，必须考虑低位向高位的进位。
本实验设计实现一个全加器，输入信号包含两加数
i
a 、 i
b
，以及进位输入
i
c
，输
出信号包含结果位
i
s
以及进位输出
i 1
c +
。其中，进位输入
i
c
为低一位加法运算产生
的进位，进位输出
i 1
c +
将作为高一位加法运算的进位输入。表 2.1 给出了对应的真
值表。从真值表可以写出
i
s
与
i 1
c +
的逻辑表达式：
s c a b c a b c a b c a b i i i i i i i i i i i i i
=~ & ~ & |~ & & ~ | & ~ & ~ | & & （2.1）
c a b c a b c a b i i i i i i i i i +1
= & | & ~ & | & & ~
 （2.2）
化简为：
s c a b i i i i
= ^ ^ ( )
 （2.3）
c a b c a b i i i i i i +1
= & | & ^ ( )
 （2.4）
表 2.1 全加器真值表
i
c ai i
b i
s i 1
c +
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
61
0 0 0 0 0
0 0 1 1 0
0 1 0 1 0
0 1 1 0 1
1 0 0 1 0
1 0 1 0 1
1 1 0 0 1
1 1 1 1 1
三、功能模块图与输入输出引脚说明
全加器工程包含顶层模块 adder 与底层模块 Adder_module，图 2.6 是使用
Quartus 生成的顶层文件的 BSF 图，图 2.7 是整个工程的模块功能图。下面介绍一
下顶层模块各引脚的功能：
图 2.6 全加器顶层文件 BSF 图
全加器效果
实现模块
adder.v
Adder_module.v
SW_In[2:0] LED_Out[1:0]
c_in
a
b
c_out
s
图 2.7 全加器模块功能图
（1）SW_In：拨动开关输入，共有三位总线。SW_In[2]、SW_In[1]和 SW_In[0]
分别连接“全加器”的输入信号 c_in、a 和 b，用于模拟输入信号。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
62
（2）LED_Out：输出到 LED 灯，共有两位总线。LED_Out[1]和 LED_Out[1]分
别连接“全加器”的输出信号 c_out 和 s，通过 LED 灯的点亮或熄灭来表示全加器
的运算结果。
四、程序设计
图 2.8 是截取自底层模块 Adder_module 的部分代码：
6-10：信号输入输出端口及类型声明。
12-13：这是本次实验的重要程序，用于实现全加器功能，见公式（2.3）和公
式（2.4）。
图 2.8 全加器实验核心代码
五、FPGA 管脚配置
图 2.9 是使用 Quartus 生成的 Pin Planner 管脚图，SW_In[2:0]输入信号分别
与 MINI_FPGA 开发板上的 SW2、SW1 和 SW0 相连；LED_Out[1:0]输出信号分别与开
发板上的 LED1~LED0 相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，
这里就不再赘述。
图 2.9 全加器实验 Pin Planner
六、实验结果
图 2.10 是当 SW2、SW1 和 SW0 全部拨至“UP”位置时的实验现象。此时
i
a 、 i
b 、
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
63
i
c
均为 1，全加器运算结果为
1 i
s = ， 1
1 i
c +
=
，即 LED1 和 LED0 均点亮。因篇幅有
限，其他情况请自行验证。
七、思考与拓展
用四个全加器级联可以构成一个四位的加法器，只需将低位全加器的进位输出
连接到高位全加器的进位输入即可，请编写程序在 FPGA 中实现四位加法器。
图 2.10 全加器实验结果
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
64
实验三 译码器 编码器
实验 3.1 实现 3-8 译码器
一、实验设计目标
在 FPGA 中使用行为描述语句实现 3-8 译码器。
二、实验设计思路
译码器电路有 n 个输入和 2n 个输出，每个输出都对应着一个可能的二进制输
入。本实验设计实现一个 3-8 译码器，表 3.1 给出了该译码器的真值表。从真值
表可以写出
y y 7 0
~
的逻辑表达式：
y a a a 7 2 1 0
= & & y a a a 6 2 1 0
= & & ~ y a a a 5 2 1 0
= & ~ & y a a a 4 2 1 0
= & ~ & ~ y a a a 3 2 1 0
=~ & & y a a a 2 2 1 0
=~ & & ~ y a a a 1 2 1 0
=~ & ~ &
7 2 1 0
6 2 1 0
5 2 1 0
4 2 1 0
3 2 1 0
2 2 1 0
1 2 1 0
0 2 1 0
& &
& & ~
& ~ &
& ~ & ~
~ & &
~ & & ~
~ & ~ &
~ & ~ & ~
y a a a
y a a a
y a a a
y a a a
y a a a
y a a a
y a a a
y a a a
=
=
=
=
=
=
=
=
 （3.1）
表 3.1 3-8 译码器真值表
2
a 1
a 0
a 7
y 6
y 5
y 4
y 3
y 2
y 1
y 0
y
0 0 0 0 0 0 0 0 0 0 1
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
65
0 0 1 0 0 0 0 0 0 1 0
0 1 0 0 0 0 0 0 1 0 0
0 1 1 0 0 0 0 1 0 0 0
1 0 0 0 0 0 1 0 0 0 0
1 0 1 0 0 1 0 0 0 0 0
1 1 0 0 1 0 0 0 0 0 0
1 1 1 1 0 0 0 0 0 0 0
三、功能模块图与输入输出引脚说明
译码器工程包含顶层模块 decode38 与底层模块 decode_module，图 3.1 是使
用 Quartus 生成的顶层文件的 BSF 图，图 3.2 是整个工程的模块功能图。下面介
绍一下顶层模块各引脚的功能：
图 3.1 逻辑门顶层文件 BSF 图
译码器效果
实现模块
decode38.v
decode_module.v
SW_In[2:0] LED_Out[7:0]
a2
a1
a0
y7
y6
y5
y4
y3
y2
y1
y0
图 3.2 译码器模块功能图
（1）SW_In：拨动开关输入，共有三位总线。SW_In[2:0]分别连接“3-8 译码
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
66
器”的输入“a2、a1、a0”。
（2）LED_Out：输出到 LED 灯，共有八位总线。LED_Out[7:0]分别连接“3-8
译码器”的输出“y7~y0”，通过 8 个 LED 灯的亮灭情况来判断二进制输入。
四、程序设计
图 3.3 是截取自底层模块 decode_module 的部分代码：
5-6：输入输出信号声明。
8-15：使用连续赋值语句 assign 实现 y7~y0 的逻辑表达式，见公式（3.1）。
图 3.3 逻辑门实验核心代码
五、FPGA 管脚配置
图 3.4 是使用 Quartus 生成的 Pin Planner 管脚图，SW_In[2:0]输入信号分别
与 MINI_FPGA 开发板上的 SW2~SW0 相连；LED_Out[7:0]输出信号分别与开发板上
的 LED7~LED0 相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里
就不再赘述。
图 3.4 译码器实验 Pin Planner

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
67
六、实验结果
图 3.5 是当 SW2、SW1、SW0 分别拨至“UP、DOWN 、DOWN”位置时的实验现象。
当输入信号“a2、a1、a0”分别为“1、0、0”时，根据表 3.1，输出信号中 y4 为
“1”，其余全为“0”。即 LED4 亮，其余全灭，如图 3.5 所示。因篇幅有限，其他
情况请自行验证。
七、思考与拓展
自行建立工程，使用 case 语句实现 3—8 译码器。
图 3.5 译码器实验结果
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
68
实验 3.2 实现 8-3 优先编码器
一、实验设计目标
（1）使用 for 循环语句设计实现 8-3 优先编码器。
（2）通过此实验初步掌握 for 语句的使用方法。
二、实验设计思路
编码器就是译码器的反向器件，有 2
n个输入和 n 个输出。编码器常用来告知计
算机当前请求中断的外部设备是哪个,当有多个外部中断请求时，计算机将响应优
先级高的那个中断。本实验设计实现一个 8-3 优先编码器，假定输入信号中不会
出现高阻态或不定值，如果编码器的多个输入同时为高电平，它将选择优先级高
的那个输入。表 3.2 给出了对应的真值表。
表 3.2 8-3 优先编码器真值表
7
x 6
x 5
x 4
x 3
x 2
x 1
x 0
x 2
y 1
y 0
y
0 0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 X 0 0 1
0 0 0 0 0 1 X X 0 1 0
0 0 0 0 1 X X X 0 1 1
0 0 0 1 X X X X 1 0 0
0 0 1 X X X X X 1 0 1
0 1 X X X X X X 1 1 0
1 X X X X X X X 1 1 1
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
69

三、功能模块图与输入输出引脚说明
编码器工程包含顶层模块 pencode83 和底层模块 pencode_module，图 3.6 是
使用 Quartus 生成的顶层文件的 BSF 图，图 3.7 是整个工程的模块功能图。下面
介绍一下顶层模块各引脚的功能：
图 3.6 编码器顶层文件 BSF 图
编码器效果
实现模块
pencode83.v
pencode_module.v
SW_In[7:0] Valid
CLK LED_Out[2:0]
CLK
x[7:0] Valid
y[2:0]
图 3.7 编码器模块功能图
（1）CLK：50MHz 的系统基准时钟输入。用 CLK 的上升沿作为 always 模块的
触发信号。
（2）SW_In：拨动开关输入，共有八位总线。SW_In[7：0]分别连接“编码器”
的输入信号 x7~x0，用于模拟二进制输入。
（3）LED_Out：输出到 LED 灯，共有三位总线。LED_Out[2：0]分别连接“编
码器”的输出信号 y2~y0,通过 LED 灯的点亮或熄灭来表示编码器的二进制输出。
（4）Valid：输出有效标志位，用于表明编码器的输出是否有效。只要输入的
8 个元素中有一个为 1，输出 Valid 的值就为 1，否则为 0。该信号输出到 LED 灯，
共有一位总线。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
70
四、程序设计
图 3.8 是截取自底层模块 pencode_module 的部分代码：
5-8：输入输出信号声明，always 块的输出信号均必须定义为 reg 型。
14-15：在 always 块中，将 y 和 Valid 的值初始化为“0”，这样它们就总是被
赋予一定值的，否则，可能会生成一个锁存器。
16-21：使用 for 循环实现优先编码器功能。因为 for 循环是从 0 到 7 的，判
断 x[i]是否等于 1，这将把最终 i 的值赋给 y，因此，x[7]具有最高优先级。
图 3.8 编码器实验核心代码
20：当
x b Valid b 7 : 0 ! 8' 0, 1' 1  = =
，此时的编码输出才是在有输入时的有效
输出。如果输出 y[2：0]为“000”且 Valid 的值为 1，那么就意味着 x[7：0]的输
入为“0000_0001”；如果输出 y[2：0]为“000”且 Valid 的值为 0，那么就意味
着 x[7:0]的输入为“0000_0000”，即没有有效输入。
五、FPGA 管脚配置
图 3.9 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号与
MINI_FPGA 开发板上的 50MHz 的晶振时钟相连；SW_In[7:0]输入信号分别与开发板
上的 SW7~SW0 相连；LED_Out[2:0]输出信号分别与 LED2~LED0 相连；Valid 输出信
号与 LED3 相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不
再赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
71
图 3.9 编码器实验 Pin Planner
六、实验结果
如图 3.10 与图 3.11，当 SW7~SW0 均拨至 DOWN 时，LED2~LED0 全灭，且此时
LED3 灯灭，表明无有效输入；当 SW7~SW1 均拨至 DOWN，SW0 拨至 UP 时，LED2~LED0
全灭，且此时 LED3 灯亮，表明存在有效输入
Sw In b _ 7 0 8' [ ：] = 00000001。
图 3.10 编码器实验结果 1
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
72
图 3.11 编码器实验结果 2
如图 3.12，当 SW6，SW2，SW0 均拨至 UP 时，因为 SW6 具有最高优先级，编码
器输出
LED Out b _ 2 0 3' 1 0 [ ：] = 1
，即 LED2、LED1 亮，LED0 灭，且此时 LED3 亮。
图 3.12 编码器实验结果 3
七、思考与拓展
（1）使用逻辑方程能更简单的实现不带优先编码功能的 8-3 编码器，请自行
建立工程，实现其功能。
（2）请解释图 3.9 中第十行代码的含义；如果将 i 定义为 reg 型，预编译能
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
73
通过吗？程序功能能实现吗？
八、实验小结
在定义信号类型时，一般有 reg 型与 wire 型。reg 型即寄存器型信号，always
模块的输出信号均必须定义为 reg 型；wire 可以想象为电路内部连线，若不说明
信号类型，则默认为 wire 型。
实验四 数据选择器
一、实验设计目标
 （1）使用 case 语句设计实现自定义数据位宽的 8 选 1 数据选择器。
（2）通过此实验初步掌握 case 语句的使用方法。
（3）通过此实验初步掌握参数（parameter）型常数的定义方法和使用方法。
二、实验设计思路
数据选择器又称多路转换器或称多路开关，其功能是根据地址码的不同，从多
个输入数据流中选择一个送往公共的输出端[11]。根据数据输入端的个数的不同，
可分为 16 选 1、8 选 1、4 选 1 等数据选择器。
本实验设计使用 case 语句实现 8 选 1 数据选择器功能，包含 8 个数据输入端
D7~D0，3 个地址输入端 A2~A0，一个输入使能控制端 CSn 和一个数据输出端 Y。当
CSn 为低电平时允许数据选择器工作；每组输入信号（D7~D0）的数据位宽是可自
定义的，因按键开关个数限制，在验证实验时将其位宽定为 1 位。表 4.1 给出了
对应的真值表。

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
74
表 4.1 8 选 1 数据选择器真值表
地址 使能 数据输入 输出
A2 A1 A0 CSn D7 D6 D5 D4 D3 D2 D1 D0 Y
X X X 1 0
0 0 0 0
D0
0 0 1 0
D1
0 1 0 0
D2
0 1 1 0
D3
1 0 0 1
D4
1 0 1 X
D5
1 1 0 X
D6
1 1 1 X
D7
三、功能模块图与输入输出引脚说明
数据选择器工程包含顶层模块 mux81 与底层模块 mux81_module，图 4.1 是使
用 Quartus 生成的顶层文件的 BSF 图，图 4.2 是整个工程的模块功能图。下面介
绍一下各主要引脚的功能：

图 4.1 数据选择器顶层文件 BSF 图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
75 数据选择器
效果
实现模块
mux81.v
mux81_module.v
SW_In[2:0]
D0 LED_Out[width-1:0] Y
CSn
Key_In0[width-1:0]
Key_In1[width-1:0]
Key_In2[width-1:0]
Key_In3[width-1:0]
Key_In4[width-1:0]
Key_In5[width-1:0]
Key_In6[width-1:0]
Key_In7[width-1:0]
CSn
A[2:0]
D1
D2
D3
D4
D5
D7
D6
图 4.2 数据选择器模块功能图
（1）Width：数据位宽，在程序中定义，不属于输入输出信号。实验时，将
width 定为 1，即每组输入信号和输出端信号的位宽都为 1 位。
（2）CSn：输入使能控制信号，低电平有效。当 CSn=0 时，允许数据选择器工
作；当 CSn=1 时，禁止数据选择器工作。
（3）SW_In：拨动开关输入，共有三位总线。SW_In[2：0]分别连接“数据选
择器”的地址输入信号 A2~A0，用于模拟地址选择。
（4）Key_In0~ Key_In7：按键开关输入，均只有一位总线。Key_In0~ Key_In7
分别连接“数据选择器”的数据输入信号 D0~D7，用于模拟数据输入。
（5）LED_Out：输出到 LED 灯，共有一位总线。LED_Out 连接“数据选择器”
的数据输出端 Y，通过 LED 灯的亮灭情况来显示结果。
四、程序设计
图 4.3 是截取自底层模块 mux81_module 的部分代码：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
76
图 4.3 数据选择器实验核心代码
5-8：输入输出信号声明。
10：定义一个参数型常量 width，用于表征数据的位宽。此处定义为 1，即
Y[width-1:0]等同于 Y[0]。
12：敏感事件程序清单中的*号将自动包含 always 块中的语句或条件表达式中
的所有信号，也可直接写 always @ ( A or CSn )。
15-24：使用 case 语句实现数据选择，选择方式请参考真值表 4.4。
26：当使能控制信号 CSn=1 时，数据选择器不工作，输出恒为 0。
五、FPGA 管脚配置
图 4.4 是使用 Quartus 生成的 Pin Planner 管脚图，输入控制使能信号 CSn 与
MINI_FPGA 开发板上 SW3 相连；Key_In0~ Key_In7 分别与开发板上的 KEY0~KEY7
相连；SW_In[2:0] 分别与开发板上的 SW2~SW0 相连；LED_Out[0]直接与开发板上
的 LED0 相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不再
赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
77
图 4.4 数据选择器 Pin Planner
六、实验结果
如图 4.5 所示，当拨动开关 SW3 拨至“DOWN”，且 SW2~SW0 均拨至“UP”，选中
输入 KEY7 时，LED0 输出 KEY7 的状态，当按下 KEY7 时，LED0 灭，反之则亮。具
体实验现象请参照真值表 4.1 自行验证。
七、实验小结
（1）if 语句必须包含在一个 always 块中，always 块中的语句按它们出现的
顺序执行。
（2）用 parameter 来定义一个标识符代表一个常量，称为符号常量，即标识
符形式的常量，采用符号常量可提高程序的可读性和可维护性。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
78
图 4.5 数据选择器实验结果

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
79
实验五 触发器
实验 5.1 使用门级结构描述 D 触发器
一、实验设计目标
（1）在 FPGA 中使用门级结构描述 D 触发器。
（3）通过此实验学习门级结构建模的基本方法。
二、实验设计思路
一个逻辑电路是由许多逻辑门和开关组成的，因此用基本逻辑门的模型来描述
逻辑电路结构是最直观的。本实验设计使用结构描述语句实现 D 触发器功能，采
用带异步置位和清零端的正边沿触发方式，输入信号包含时钟信号 CLK、置位端
Setn、清零端 Clrn 和一个数据输入 D，输出信号包含数据输出 Q 和~Q。当 Setn 为
低电平时输出 Q 恒为 1；当 Setn 为高电平且 Clrn 为低电平时输出恒为 0；当 Setn
和 Clrn 都为高电平时，输出 Q 在时钟信号 CLK 的上升沿处被赋予输入 D 的值。
图 5.1 是带异步置位和清零端的正边沿触发的 D 触发器的电路结构图，该逻辑
电路的行为分析如下：
CLK
D
1 Q
2
3
4
5
6
~Q
f1
~R f2
~S
f3
f4
f5
f6
Clrn
Setn
图 5.1 带异步置位和清零端的正边沿触发的 D 触发器
当 Setn 和 Clrn 都为 1 时，可不考虑 Setn 和 Clrn 引脚，此时与非门 1 和与非
门 2 构成一个 SR 锁存器。当~S 和~R（即图 5.1 中的反馈信号 f4 和 f5）都为 1 时，
该锁存器处于存储状态。假设，时钟信号 CLK 为 0，D 为 1，则信号 f4 和 f5 都为
1，SR 锁存器进入存储状态。同时，信号 f6 将变为 0，f3 将为 1。假设 CLK 变为 1，
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
80
这将使 f4 变为 0，输出 Q 被置为 1。如果现在输入 D 变为 0，时钟信号 CLK 仍为 1，
则 f6 将变为 1，只要时钟信号 CLK 保持为 1，f3 也将保持为 1。则 f4 仍为 0，输
出 Q 保持为 1 不变。而当时钟信号变为 0 时，f4 和 f5 都将变为 1，SR 锁存器再次
处于存储状态，输出 Q 保持为不变。也就是说输出 Q 只在时钟信号 CLK 的上升沿
被置为输入 D 的值。其他情况也可类似讨论。
当置位信号 Setn（清零信号 Clrn）为 0 时，输出 Q 立即变为 1(0)，而不用等
到下一个时钟上升沿的到来，此即为异步置位和清零的特点。并且对于输出 Q 来
说，Setn 的优先级高于 Clrn。
三、功能模块图与输入输出引脚说明
该工程包含顶层模块 triggerD1 与底层模块 trigger_module，图 5.2 是使用
Quartus 生成的顶层文件的 BSF 图，图 5.3 是整个工程的模块功能图。本实验仅验
证了输出 Q 而未验证输出~Q，下面介绍一下顶层模块各引脚的功能：
图 5.2 D 触发器顶层文件 BSF 图
门级结构描述
D触发器
模块
triggerD1.v
trigger_module.v
SW_In
Q LED_Out
CLK
D
Setn
Clrn
CLK
Clrn
Setn
图 5.3 D 触发器模块功能图
（1）CLK：50MHz 的时钟信号输入。用 CLK 的上升沿作为 D 触发器的触发信号。
（2）Setn：置位输入信号。当 Setn 为低电平时输出 Q 恒为 1。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
81
（3）Clrn：清零输入信号。当 Setn 为高电平且 Clrn 为低电平时输出 Q 恒为
0。对输出 Q 来说，Setn 信号的优先级高于 Clrn 信号。
（4）SW_In：拨动开关输入，共有一位总线。SW_In 直接连接“D 触发器”的
输入“D”，用于模拟输入信号。
（5）LED_Out：输出到 LED 灯，共有一位总线。LED_Out 直接连接“D 触发器”
的输出“Q”，通过 LED 灯的亮灭情况来显示触发器的输出 Q。
四、程序设计
图 5.4 是截取自底层模块 trigger_module 的部分代码：
图 5.4 D 触发器实验核心代码
5-9：输入输出信号声明。
11-21：使用门级结构描述 D 触发器的电路结构图（图 5.1）。门声明语句的格
式为：
<门的类型>[<驱动能力><延时>]<门实例 1>[，<门实例 2>，…，<门实例 n>]；
门的类型是门声明语句必须的；驱动能力和延时是可选项；门实例 1 是在本模
块中所引用的第一个这种类型的门，而门实例 n 是引用的第 n 个这种类型的门，
且在结束时使用逗号，最后才用分号。
在本例中，代码第 11 行使用了一个名为 U1 的与非门，对应图 5.1 中的与非
门 1，输入为 Setn、f4 和 f2，输出为 f1。输出与输入无延时。
五、FPGA 管脚配置
图 5.5 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号与
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
82
MINI_FPGA 开发板上的 50MHz 的晶振时钟相连；置位输入信号 Setn 与开发板上的
KEY0 相连；清零输入信号 Clrn 与开发板上的 KEY1 相连；LED_Out 输出信号与 LED0
相连；SW_In 输入信号与开发板上的 SW0 相连。引脚连接信息已经在第一篇的 1.3
节中做过详细介绍，这里就不再赘述。
图 5.5 D 触发器实验 Pin Planner

六、实验结果
图 5.6 是当 KEY0，KEY1 均不按下时的实验现象。
当按键开关 KEY0 按下时，LED0 点亮；当按键开关 KEY0 不按下，KEY1 按下时，
LED0 熄灭；当按键开关 KEY0，KEY1 均不按下时，在每个时钟的上升沿，LED0 输
出 SW0 的状态，SW0 拨至 DOWN 时，LED0 熄灭，反之点亮。因篇幅有限，置位与清
零功能请自行验证。

图 5.6 D 触发器实验结果
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
83
七、思考与拓展
（1）本实验仅验证了输出 Q 而未验证输出~Q。对于输出 Q 来说，Setn 信号的
优先级高于 Clrn 信号，那么对于输出~Q 又是怎样的呢？请适当修改程序同时观察
输出 Q 和~Q，并结合图 5.1 解释实验现象。
八、实验小结
Verilog 既可以是一种行为描述的语言也可以是一种结构描述的语言。Verilog
模型可以是实际电路的不同级别的抽象，这些抽象的级别包括：系统级、算法级、
RTL（Register Transfer Level）级、门级和开关级。前三种都属于行为描述，
后两种属于结构描述，RTL 级是描述数据在寄存器之前流动和如何处理、控制这些
数据流动的模型，门级是描述逻辑门及逻辑门之间的连接的模型。本实验使用门
级结构描述 D 触发器，通过此实验可以学习门级结构建模的基本方法，在下一节
实验中将使用行为描述语句实现 8D 触发器功能。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
84
实验 5.2 使用行为描述语句实现 8D 触发器
一、实验设计目标
（1）在 FPGA 中使用行为描述语句实现 8D 触发器功能。
（3）结合实验 5.1 与实验 5.1，对比理解行为描述语句和结构描述语句的不
同及各自的优点。
二、实验设计思路
输出在时钟信号某个特定时刻随输入改变的器件称为触发器。本实验设计实现
一个带异步置位与清零端的正边沿触发的 8D 触发器，除包含 8 个数据输入端
D7~D0、和 8 个数据输出端 Q7~Q0 外，其他功能均与实验 5.1 相同，此处就不再赘
述。
表 5.1 是第 i 组输入输出信号的真值表，从真值表可以写出
Qi
的逻辑表达式：
Q D Setn Clrn Setn i i = + • •

(0 7,    i i N)
 （5.1）
表 5.1 8D 触发器真值表
置位 清零 输入 输出
Setn Clrn CLK Di Qi
0 X X X 1
1 0 X X 0
1 1

0 0
1 1

1 1

三、功能模块图与输入输出引脚说明
该工程包含顶层模块 triggerD2 与底层模块 trigger_module，图 5.7 是使用
Quartus 生成的顶层文件的 BSF 图，图 5.8 是整个工程的模块功能图。下面介绍一
下顶层模块各引脚的功能：
（1）CLK 信号、Setn 信号和 Clrn 信号的功能均与实验 5.1 中 D 触发器相同，
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
85
此处不再赘述。
图 5.7 8D 触发器顶层文件 BSF 图
行为描述语句
实现
8D触发器模块
triggerD2.v
trigger_module.v
SW_In[7:0]
Q[7:0] LED_Out[7:0]
CLK
D[7:0]
Setn
Clrn
CLK
Clrn
Setn
图 5.8 8D 触发器模块功能图
（2）SW_In：拨动开关输入，共有八位总线。SW_In[7:0]分别连接“8D 触发
器”的数据输入“D7~D0”，用于模拟输入信号。
（5）LED_Out：输出到 LED 灯，共有八位总线。LED_Out[7:0]分别连接“8D
触发器”的输出“Q7~Q0”，通过 8 个 LED 灯的亮灭情况来显示触发器的输出结果。
四、程序设计
图 5.9 是截取自底层模块 trigger_module 的部分代码：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
86
图 5.9 8D 触发器实验核心代码
5-9：输入输出信号声明。
11-21：使用行为描述语句实现带异步置位和清零端的 8D 触发器的逻辑表达
式，见公式（5.1）。Setn 信号的优先级高于 Clrn 信号。
五、FPGA 管脚配置
图 5.10 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号、Setn 信号和
Clrn 信号的配置方式均与实验 5.1 中相应信号的配置方式相同； LED_Out[7:0]
输出信号分别与开发板上的 LED7~LED0 相连；SW_In[7:0]输入信号分别与 SW7~SW0
相连。引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不再赘述。
图 5.10 8D 触发器实验 Pin Planner
六、实验结果
当按键开关 KEY0 按下时，LED7~LED0 均点亮；当按键开关 KEY0 不按下，KEY1
按下时，LED7~LED0 均熄灭；当按键开关 KEY0，KEY1 均不按下时，在每个时钟的
上升沿，LED7~LED0 分别输出 SW7~SW0 的状态，SWi 拨至 DOWN 时，LEDi 熄灭，反
之点亮。图 5.11 是当 KEY0，KEY1 均不按下时的实验现象。因篇幅有限，置位与
清零功能请自行验证。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
87
七、思考与拓展
图 5.12 是使用 if 语句直接描述 D 触发器功能的实验代码，它不同于实验 5.1
图 5.11 8D 触发器实验结果
节从触发器的门级结构出发，也不同于实验 5.3 节从触发器的真值表出发，实际
上在设计更为复杂的 FPGA 系统时，往往结合这几种方式，择优处理。请参考图 5.12
所示代码自行建立工程实现 8D 触发器功能。
图 5.12 if 语句实现 8D 触发器参考代码

八、实验小结
（1）在本实验中，我们使用了非阻塞语句运算符“<=”代替阻塞语句运算符
“=”。当使用阻塞运算符“=”时，赋值语句立即就把当前值赋给变量；但是，当
使用非阻塞运算符“<=”时，赋值语句要等到 always 块结束时后，才完成对变量
的赋值操作。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
88
（2）行为描述语句可描述顺序执行或并行执行的程序结构，本节实验使用行
为描述语言实现 8D 触发器功能，相较于实验 5.1，程序更加直观、简洁，请结合
实验 5.1 理解它们各自的特点和优势。
实验 5.3 实现 4JK 触发器
一、实验设计目标
（1）设计实现一个 4 输入的带置位和清零端的正边沿触发的 JK 触发器。
（2）通过此实验学习利用编程得到任意频率的时钟信号的基本方法。
二、实验设计思路
类似于实验 5.2 节，本节实验设计实现一个带置位和清零端的正边沿触发的
JK 触发器。包含时钟信号 CLK1，置位端 Setn，清零端 Clrn，四组数据输入信号
J3~J0、K3~K0 和四组数据输出信号 Q3~Q0。当 Setn 和 Clrn 都为高电平时，输出
Q 在时钟信号 CLK1 的上升沿处随输入 J、K 的值变化，在 J、K 端均为 1 时，每遇
到一个时钟的上升沿，输出端的状态翻转一次。
表 5.2 是第 i 组输入输出信号的真值表，
Qn+1
表示该组输出的当前值，
Qn
表示
该组输出上一刻的状态，从真值表可以写出
Qn+1
的逻辑表达式：
1
( ) Q J Q K Q Setn Clrn Setn n i n i n + = • + • • • +

(0 3,    i i N)
 （5.2）
表 5.2 带置位与清零端的 JK 触发器真值表
置位 清零 输入 输出
Setn Clrn CLK1 i
J Ki Qn+1 Qn+1
0 X X X X 1 0
1 0 X X X 0 1
1 1

0 0
Qn
(保持)
Qn
(保持)
1 1

0 1 0 1
1 1

1 0 1 0
1 1

1 1
Qn
(翻转)
Qn
(翻转)
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
89

三、功能模块图与输入输出引脚说明
JK 触发器工程包含顶层模块 triggerJK1 和底层模块 trigger_module，图 5.13
是使用 Quartus 生成的顶层文件的 BSF 图，图 5.14 是整个工程的模块功能图。下
面介绍一下顶层模块各引脚的功能：
图 5.13 JK 触发器顶层文件 BSF 图
JK触发器
效果实现模块
triggerJK1.v
trigger_module.v
SW_In[7:0]
LED_Out[7:0]
Q[3:0]
CLK
J[3:0]
Setn
Clrn
CLK
Clrn
Setn
K[3:0]
Q_n[3:0]
图 5.14 JK 触发器模块功能图
（1）CLK：50MHz 的系统基准时钟输入。为了能观察到 JK 触发器的翻转效果，
必须降低时钟信号 CLK1 的频率，将 CLK 适当分频可得到频率为 12.5HZ 的时钟信
号 CLK1，用 CLK1 的上升沿作为 JK 触发器的触发信号。
（2）Setn：置位输入信号。当 Setn 为低电平时 JK 触发器输出 Q 恒为 1。
（3）Clrn：清零输入信号。当 Setn 为高电平且 Clrn 为低电平时输出 Q 恒为
0。且 Setn 信号的优先级高于 Clrn 信号。
（4）SW_In：拨动开关输入，共有八位总线。SW_In[7:4]分别连接“JK 触发
器”的输入 J3~J0，SW_In[3:0]分别连接“JK 触发器”的输入 K3~K0，用于模拟输
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
90
入信号。
（5）LED_Out：输出到 LED 灯，共有八位总线。LED_Out[7:4]分别连接“JK
触发器”的输出 Q3~Q0，LED_Out[3:0]分别连接“JK 触发器”的输出~Q_n0（对应
于表 5.2 中的
Qn+1
），通过 LED 灯的亮灭情况来观察触发器的输出效果。
四、程序设计
图 5.15 是截取自底层模块 pencode_module 的部分代码：
图 5.15 JK 触发器实验核心代码
13-26：一个分频程序的基本写法，用于产生频率为 12.5Hz 的时钟信号 CLK1。
13-15 定义了该分频程序需用到的内部信号及参数；19 行代码中的“-1”用于保
证所得到的时钟信号 CLK1 的频率的准确性，非常重要；需要注意的是常量的书写
格式；时钟信号 CLK1 的频率计算公式为
1
2 CLK CLK f f Timex =  
 （5.3）

=   = 50000000 2000000 2 12.5(Hz)
28-38：实现带异步置位和清零端的 JK 触发器的逻辑表达式，见公式（5.2）。
Setn 信号的优先级高于 Clrn 信号。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
91
五、FPGA 管脚配置
图 5.16 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号、Setn 信号、
Clrn信号、SW_In[7:0]输入信号和LED_Out[7:0]输出信号的配置方式均与实验5.2
中相应信号的配置方式相同，但它们所行使的功能是不同的。引脚连接信息已经
在第一篇的 1.3 节中做过详细介绍，这里就不再赘述。
图 5.16 JK 触发器实验 Pin Planner

六、实验结果
本实验设计实现包含 4 组输入输出信号的 JK 触发器，在验证实验时仅需挑选
其中一组进行观察。如挑选第四组输入输出信号，SW7 和 SW3 分别连接 J3、K3 输
入信号，LED7 和 LED3 分别连接 Q3、 Q_n3 输出信号。当 SW7 和 SW3 均拨至“DOWN”
时，输出处于“保持”状态，LED7 和 LED3 的状态不改变；当 SW7 和 SW3 分别拨至
“DOWN、UP”时，输出 Q 为 0，LED7 灭，LED3 亮；当 SW7 和 SW3 分别拨至“UP、
DOWN”时，输出 Q 为 1，LED7 亮，LED3 灭；当 SW7 和 SW3 均拨至“UP”时，输出
处于“翻转”状态，每遇到一个时钟信号 CLK1 的上升沿，LED7 和 LED3 的状态翻
转一次。
图 5.17 是当 SW7 和 SW3 分别拨至“UP、DOWN”时的实验现象（仅考虑第四组
信号），因篇幅受限，其他情况请自行验证。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
92
七、思考与拓展
（1）在观察现象时，发现实验结果不太理想，LED 灯的状态变换情况存在一
定的延时，请问这是什么原因造成的？
图 5.17 JK 触发器实验结果

（2）为解决（1）中的延时问题，令 trigger_module.v 文件中的参数 Timex =
21'd200_000，当 SW7 和 SW3 均拨至“UP”时，LED7 和 LED3 快速闪烁。
（3）参考实验 5.1 中 D 触发器实验思路，使用结构描述的方式实现带置位和
清零端的 JK 触发器功能。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
93
实验六 加法计数器
一、实验设计目标
（1）在 FPGA 中设计实现 24 进制加法计数器，并用数码管显示其结果。
（3）通过此实验学习 MINI_FPGA 开发板上的数码管的使用方法。
二、实验设计思路
本实验设计实现一个 24 进制的加法计数器，它由晶体振荡器、分频器、计数
器和数码管显示器组成，图 6.1 是该加法计数器的示意图。
晶振 分频器 计数器 数码管
显示器
CLK
标准秒脉
冲CLK1
Result
RSTn
Digitron_Out
DigitronCS_Out
图 6.1 24 进制加法计数器示意图
晶体振荡器产生稳定的 50MHz 的脉冲信号 CLK，经过分频器后输出标准秒脉冲
CLK1，作为计数器的计数时钟。计数器按照“00-01-02…22-23-00-01”的规律计
数，每增加 1 秒，计数器加 1，信号 Result[7:4]代表计数器输出结果的十位，
Result[3:0]代表个位，RSTn 为复位输入信号。将计数器的结果 Result 送给数码
管显示器显示，当 MINI_FPGA 开发板正放时，数码管从左往右数依次为 DIG1-DIG6，
使用数码管 DIG5 和 DIG6 分别显示十位、个位。数码管显示器输出信号
Digitron_Out 和 DigitronCS_Out，其中，Digitron_Out 为七段码管的显示输出，
DigitronCS_Out 为 6 个数码管的片选信号，它们的具体驱动方法和功能在第一篇
的 1.3.2 节中已经详细介绍过，这里不再赘述。
三、功能模块图与输入输出引脚说明
该工程包含顶层模块 counter24 与底层模块 Accumulator_module 、
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
94
Digitron_NumDisplay_module。其中，Accumulator_module 实现分频器和计数器
的功能，Digitron_NumDisplay_module 实现数码管显示器的功能。晶振由
MINI_FPGA 开发板上的外设提供。图 6.2 是使用 Quartus 生成的顶层文件的 BSF 图，
图 6.3 是整个工程的模块功能图。下面介绍一下顶层模块各引脚的功能：
图 6.2 加法计数器顶层文件 BSF 图
counter24.v
Accumulator
_module.v
CLK
RSTn
CLK 分频器
+计数器
实现模块 Result[7:0]
Digitron_NumDisplay
_module.v
数码管显示器
实现模块
CLK
RSTn
Digitron_Out
[7:0]
DigitronCS
_Out[5:0]
Digitron_Out
[7:0]
DigitronCS
_Out[5:0]
图 6.3 加法计数器模块功能图
（1）CLK：50MHz 的时钟信号输入。将其分频后产生标准秒脉冲 CLK1。
（2）RSTn：复位输入信号。低电平有效，复位后计数器输出 Result 变为 00。
（3）Digitron_Out：七段数码管的显示输出，共有八位总线。Digitron_Out[7:0]
分别控制字码段“DP、G、F、E、D、C、B、A”的点亮情况。
（4）DigitronCS_Out：数码管的片选信号，因为开发板上有 6 个七段数码管，
所以共有六位总线。DigitronCS_Out[5:0]分别对应于数码管 DIG1~DIG6，其也称
为七段数码管的扫描驱动，在本实验中扫描频率为 250KHz,由于人眼的视觉残留效
果，呈现在眼前的便是整体的“十位-个位”显示。
四、程序设计
（1）图 6.4 是截取自底层模块 Accumulator_module 的部分代码：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
95
24：触发条件中的 CLK1 是由之前的分频代码产生的标准秒脉冲，周期为 1s。
28-29：RSTn 为 0 时，系统复位，计数器输出 Result[7:0] 变为“00”。
31-42：这是一个 24 进制计数器，个位（Result[3:0]）满 10 后向十位进位，
整体按照“23”翻“00”规律计数。
图 6.4 Accumulator_module 核心代码
（2）图 6.5 是截取自底层模块 Digitron_NumDisplay_module 的部分代码，请
结合第一篇的 1.3.2 节中关于数码管模块的介绍部分理解：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
96
图 6.5 Digitron_NumDisplay_module 核心代码
10-11、22-24、48-49：分频程序，用于产生频率为 250KHz 的扫描信号，频率
的计算方法参考实验 5.3 中的公式（5.3）。
15-18：参数型常量定义。定义了“_0_1_2…_9”这九个输送到数码管的常量
的值。
25-27：片选信号 DigitronCS_Out 的扫描程序。W_DigitronCS_Out[5:0]信号
的值将在程序的最后赋给 DigitronCS_Out[5:0]信号。DigitronCS_Out[5:0]分别
控制数码管 DIG1-DIG6，当它的某一位为 0 时，对应的数码管选中，反之则不选中。
在本实验中仅使用数码管 DIG5 和 DIG6 显示计数器的十位和个位，因而
DigitronCS_Out[5：0]的值在“111110”和“111101”之间变换，变换频率为 250KHz。
29-32：当 DigitronCS_Out[5：0]的值为“111110”时，选中数码管 DIG6，将
计数器个位的值赋给 SingleNum；当 DigitronCS_Out[5：0]的值为“111101”时，
选中数码管 DIG5，将计数器十位的值赋给 SingleNum。
34-46：根据 SingleNum 信号的值选择输送到数码管的常量，控制字码段的点
亮情况。例如当 SingleNum 的值为 4'b1000 时，输送到数码管的常量为“_8”, 即
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
97
Digitron_Out[7：0]的值为 8'b0111_1111，字码段 A、B、C、D、E、F、G 全部点
亮，DP（小数点）熄灭，数码管显示数字“8”。
五、FPGA 管脚配置
图 6.6 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号与
MINI_FPGA 开发板上的 50MHz 的晶振时钟相连；复位输入信号 RSTn 与开发板上的
SW0 相连；数码管片选信号 DigitronCS_Out[5：0]分别与数码管 DIG1~DIG6 的片
选引脚相连；数码管输出显示信号 Digitron_Out[7：0]分别与字码段“DP、G、F、
E、D、C、B、A”的控制引脚相连。相应引脚连接信息已经在第一篇的 1.3 节中做
过详细介绍，这里就不再赘述。
六、实验结果
图 6.7 是当 SWO 拨至“UP”时的实验现象，数码管显示“21”。当 SW0 拨至“DOWN”
时，将显示“00”。因篇幅有限，复位功能请自行验证。
图 6.6 加法计数器实验 Pin Planner

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
98
图 6.7 加法计数器实验结果
七、思考与拓展
（1）本实验初次使用数码管验证实验输出，认真阅读代码，理解数码管的驱
动原理，这将在后面的实验中频繁出现。
（2）当删除图 6.5 中的 26-27 行代码时，实验现象及其形成原因是什么？
实验七 抢答器
一、实验设计目标
（1）设计实现一个可容纳四组选手参赛的抢答器系统，每组设一个抢答按钮。
答题开始后，由主持人按下“开始”键后进入抢答环节，当某个小组抢答成功时，
抢答器系统发出半秒的低频音，显示该组别序号并点亮该组“选手指示灯”直至
系统复位。此时进入答题计时环节，若超过 30 秒仍未答出，抢答器系统发出 1 秒
的高频音示警，同时点亮“超时灯”1 秒。由裁判员按下“复位”键，开始新一轮
答题。
（2）通过此实验学习 MINI_FPGA 开发板上的蜂鸣器的发声原理。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
99
二、实验设计思路
本实验设计实现一个抢答器系统，它由第一信号鉴别、锁存模块，答题计时模
块，蜂鸣器发声模块和数码管显示模块组成，图 7.1 是该系统的示意图。
第一信号
鉴别、锁存
模块U1
答题
计时
模块U2
蜂鸣器
发声
模块U3
数码管
显示
模块U4
Digitron_Out
DigitronCS_Out
K1~K4
Start
Player_Number
LED_Out
Buzzer
_Answer
Timer
_Start
TimerL TimerH
Buzzer
_TimeOver
LED_OverTime
Buzzer_Out
图 7.1 抢答器系统示意图
第一信号鉴别、锁存模块的关键在于准确判断出第一抢答者并将其锁存。设置
一个主持人“开始”按钮 Start，四个抢答按钮 K1、K2、K3、K4，主持人开始后，
抢答信号才能被有效识别，在某个小组抢答成功后，其他组的抢答信号无效。本
模块输出 LED_Out[3:0]、Player_Number[3:0]、Buzzer_Answer 和 Timer_Start
信号。LED_Out 用于控制“选手指示灯”；Player_Number 存储抢答成功的小组序
号；Buzzer_Answer 作为“抢答成功鸣笛标志位”，送到蜂鸣器发声模块，控制蜂
鸣器的发声频率及时间；Timer_Start 作为答题计时模块的“启动标志位”，当某
个小组抢答成功后，Timer_Start 变为 1，启动答题计时器。
答题计时模块的关键在于倒计时的启动，利用 Timer_Start 信号控制倒计时的
开启。在实验六中设计实现了一个加法计数器，类似的，本模块只需实现一个
“30-29-…-01-00”的减法计数器即可。本模块输出 TimerH[3:0]、TimerL[3:0]、
Buzzer_TimeOver 和 LED_OverTime 信号。TimerH 和 TimerL 分别存储倒计时的十
位和个位；Buzzer_TimeOver 作为“答题超时鸣笛标志位”，送到蜂鸣器发声模块；
LED_OverTime 用于控制答题“超时灯”。
蜂鸣器发声模块用于控制蜂鸣器的发声频率、何时发声及发声时长。通过标志
位 Buzzer_Answer 和 Buzzer_TimeOver 控制送到蜂鸣器上的电压值及电压变化频
率。Buzzer_Out 即为最终送给蜂鸣器的信号。
数码管显示模块用于显示倒计时的时间和抢答成功的组别序号，驱动原理与实
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
100
验六相同。
三、功能模块图与输入输出引脚说明
该工程包含顶层模块 responder 与底层模块 Sel_module、Timer_module、
Buzzer_module 和 Digitron_NumDisplay_module。底层模块依次对应于图 7.1 中
从左至右四个功能模块。图 7.2 是使用 Quartus 生成的顶层文件的 BSF 图，整个
工程的模块功能图参考图 7.1 即可。下面介绍一下顶层模块各主要引脚的功能：
图 7.2 抢答器系统顶层文件 BSF 图
（1）CLK：50MHz 的基准时钟信号输入。在 Sel_module 模块中将其分频后产
生标准秒脉冲 CLK1。
（2）RSTn：系统复位输入信号。低电平有效，由裁判员控制，复位后系统回
到初始状态，“选手指示灯、超时灯”熄灭，蜂鸣器不响，数码管显示“030”。
（3）Start：抢答开始输入信号。由主持人控制，当 Start 为 1 时，各个小组
的抢答信号有效。
（4）Key_In：抢答输入信号。Key_In [3:0]分别连接抢答器电路的 K4~K1，当
Key_In 为 0 时表示存在抢答操作。
（5）LED_Out：“选手指示灯”输出信号，输出到 LED 灯，共有四位总线。LED_Out
[3:0]分别连接第四组~第一组选手的指示灯，例如若第四组选手抢答成功，
LED_Out [3:0]的值为“1000”。
（6）Buzzer_Out：输出到蜂鸣器。
（7）LED_OverTime_Out：答题“超时灯”输出信号。LED_OverTime_Out 信号
与抢答器电路的 LED_OverTime 相连，控制超时灯。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
101
（8）Digitron_Out：七段数码管的显示输出，共有八位总线。
（9）DigitronCS_Out：数码管的片选信号，共有六位总线。（8）、（9）与实验
六中相应引脚功能相同，不再赘述。
四、程序设计
（1）7.3 是截取自底层模块 Sel_module 的部分代码：
图 7.3 Sel_module 核心代码
30-42：Timer_Start 是“计时器启动标志位”，当第一信号鉴别、锁存模块锁
存了第一抢答信号后，令 Timer_Start 变为 1，启动答题计时器电路。当
Timer_Start 变为 1 后，30-42 行代码将 Buzzer_Answer（“抢答成功鸣笛标志位”）
置为 1，保持半秒后，再置为 0。这里用到了一个很简单的计数器 Count，用于控
制半秒的时间。
43-49：判断是否已经锁存以及第一组别是否有抢答操作，Block 是锁存信号，
高电平表示电路已锁存。若第一组抢答，且在此之前未有其他组抢答成功（Block
为 0），45-48 行依次为点亮第一组“选手指示灯”，锁存电路，开启答题计时器，
将第一组别序号送给数码管。
（2）图 7.4 是截取自底层模块 Buzzer_module 的部分代码，请结合第一篇的
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
102
1.3 节中关于蜂鸣器模块的介绍内容进行理解：
图 7.4 Buzzer_module 核心代码
17-25：通过“鸣笛标志位”控制送到蜂鸣器上的电压和电压变化频率。例如，
当某个小组抢答成功时，“抢答成功鸣笛标志位” Buzzer_Answer 将被置为 1 且经
过半秒后变回 0，这半秒内将常量_Answer 的值（'d95419）赋给 Pulse_x，半秒后
Pulse_x 的值变为'd20000。
29-37：这是一个小型计数器。若 Pulse_x 的值为“_Answer”或“_TimeOver”，
则控制 W_buzzer 的值以一定频率在“0”和“1”之间翻转，这样便形成了一定频
率的脉冲信号。W_buzzer 的值即为将送给蜂鸣器的值，该脉冲信号的频率即控制
蜂鸣器发声的频率。
五、FPGA 管脚配置
图 7.5 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号、数码
管片选信号 DigitronCS_Out 和数码管输出显示信号 Digitron_Out 的配置方式与
实验六相同，使用 DIG4 显示抢答成功组别的序号，使用 DIG5 和 DIG6 显示倒计时
的十位和个位；复位输入信号 RSTn 和抢答开始信号 Start 分别与开发板上的 SW0
和 SW1 相连；Buzzer_Out 信号输出到蜂鸣器引脚；Key_In[3:0]分别与按键开关
KEY3~KEY0 相连；LED_Out[3:0]分别输出到 LED3~LED0，LED_OverTime_Out 输出到
LED4，LED4 点亮表明答题超过 30 秒。相应引脚连接信息已经在第一篇的 1.3 节中
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
103
做过详细介绍，这里就不再赘述。
图 7.5 抢答器系统 Pin Planner

六、实验结果
当 SWO 和 SW1 均拨至“UP”时，系统进入抢答环节。若假设第二组选手抢答成
功，此时蜂鸣器鸣低频音并持续半秒钟，灯 LED1 点亮，数码管 DIG4 将显示“2”，
DIG5 和 DIG6 将显示倒计时数字；若答题超过 30 秒，灯 LED4 将点亮 1 秒，蜂鸣器
鸣高频音并持续 1 秒钟，DIG5 和 DIG6 显示“00”并保持直到系统复位。图 7.6 即
为上述假设中处于倒计时 19 秒时的现象。因篇幅受限，其他情况请自行验证。

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
104
图 7.6 抢答器系统实验结果
七、思考与拓展
（1）新建一个工程，自行设计程序或查询相关资料，实现以下功能：①计分
功能，每组开始预置 5 分，由主持人计分，答对一次加 1 分，答错一次减 1 分；
②抢答未开始前若有人抢答则报警并点亮相应选手指示灯。
（2）本实验初次使用蜂鸣器显示实验结果，请仔细理解蜂鸣器的工作方法，
并新建工程，实现按键控制蜂鸣器发“Do、Re、Mi、Fa、Sol、La、Si”音阶的功
能。实际上本实验中的低频音和高频音即为“Do、Si”，频率的计算方法参考实验
5.3 中的公式（5.3）。各个音阶的参考频率依次为 262、294、330、349、392、440
和 494Hz。
实验八 功能数字钟
一、实验设计目标
在 FPGA 中设计实现一个多功能数字钟，具备以下功能：
（1）准确计时。能显示时、分、秒和星期，小时的计时为 24 进制，分和秒的
计时为 60 进制，星期按“1、2、3、4、5、6、日”显示。
（2）校时功能。时、分和星期可调。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
105
（3）准点报时。当“时-分-秒”为“XX-59-50、XX-59-52、XX-59-54、XX-59-56、
XX-59-58”时，蜂鸣器发“嘀”；当“时-分-秒”为“XX-00-00”时，扬声器发
“嗒”。
二、实验设计思路
本节实验是在综合了前面几节实验知识点的基础上开展的，容易理解和掌握，
该数字钟系统由计时、校时模块，数码管显示模块和整点报时模块组成，图 8.1
是该系统的示意图。
计时、
校时
模块U1
数码管
显示
模块U2
整点
报时
模块U3
SecL
SecH
MinL
MinH
HourL
HourH
Week
Digitron_Out
DigitronCS_Out
Buzzer_Out
AdjtWeek
AdjtHour
AdjtMin
DispWeek_n
图 8.1 数字钟系统示意图
计时、校时模块能工作于“计时”和“校时”两个状态。本模块内含一个分频
电路用于产生标准秒脉冲。设置 3 个开关用于调整时间，包括星期调整开关
AdjtWeek、小时调整开关 AdjtHour 和分钟调整开关 AdjtMin，当其有效时，模块
停止计时，工作于“校时”状态。输出信号包括秒个位 SecL、秒十位 SecH、分个
位 MinL、分十位 MinH、时个位 HourL、时十位 HourH 和星期 Week。
数码管显示模块用于显示“时、分、秒、星期”。MINI_FPGA 开发板上只有 6
个数码管，但要显示包括“时、分、秒、星期”在内的 7 个时间信号，因此，我
们增
加一个“星期显示输入（DispWeek_n）”信号，用于查看当前星期，低电平有效。
当要调整星期时，也需要使用数码管显示星期界面， AdjtWeek 信号便是用于告知
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
106
这一点的。
整点报时模块的关键在于判断出当前时刻。使用 if 语句判断是否满足报时条
件，通过改变输送到蜂鸣器上的导通信号的频率来改变蜂鸣器发声的频率，这在
实验七中已经用到过，工作原理相同。
三、功能模块图与输入输出引脚说明
该 工 程 包 含 顶 层 模 块 clock 与 底 层 模 块 TimeKeeper_module 、
Digitron_TimeDisplay_module 和 Buzzer_module。底层模块依次对应于图 8.1 中
的 U1、U2、U3。图 8.2 是使用 Quartus 生成的顶层文件的 BSF 图，整个工程的模
块功能图参考图 8.1 即可。下面介绍一下顶层模块各主要引脚的功能：
图 8.2 多功能数字钟顶层文件 BSF 图
（1）CLK：50MHz 的基准时钟信号输入。将其 50_000_000 分频得到 1HZ 的数
字钟工作频率 CLK_1HZ。将其 100_000 分频得到 500HZ 的蜂鸣器报时频率“Di”，
将其 50_000 分频得到 1KHZ 的蜂鸣器报时频率“Da”。将其 200 分频得到七段数码
管的扫描频率。
（2）RSTn：系统复位输入信号，低电平有效。复位后“星期-小时-分钟-秒”
置为“1-00-00-00”。
（3）DispWeek_n：星期显示输入信号，低电平有效。当 DispWeek_n 或 AdjtWeek
信号有效时，数码管 DIG1-DIG5 全灭，DIG6 显示当前星期；当 DispWeek_n 和
AdjtWeek 信号均无效时，数码管 DIG1-DIG6 显示当前“时、分、秒”。
（4）AdjtWeek、AdjtHour 、AdjtMin：星期、小时、分钟调节输入信号，高
电平有效。当 AdjtWeek=1 时，每来一个标准秒脉冲 CLK_1HZ 的上升沿，星期增加
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
107
一天。其他 2 个开关相似。AdjtWeek、AdjtHour 、AdjtMin 信号的优先级从左至
右依次降低。
（5）Buzzer_Out：输出到蜂鸣器，通过改变输送到蜂鸣器的导通信号的频率，
来改变蜂鸣器发声的频率，控制蜂鸣器产生“嘀、嗒”的报时声。
（6）Digitron_Out：七段数码管的显示输出，共有八位总线。
（7）DigitronCS_Out：数码管的片选信号，共有六位总线。也称七段数码管
的扫描驱动信号，扫描频率为 250KHz。（6）、（7）与实验六中相应引脚功能相同，
不再赘述。
四、程序设计
（1）图 8.3 是截取自底层模块 TimeKeeper_module 的部分代码，理解了此段
程序则可以相应理解该模块的所有程序：
图 8.3 TimeKeeper_module 代码
47-72：当 AdjtHour 为 1 且 AdjtWeek 为 0 时，系统进入“校时”状态，开始
调整“小时”。若时个位为 9，则时个位清零并向时十位进位；若时十位、时个位
为“23”，则时十位、时个位清零；若以上均不满足，则时个位加 1，时十位不变。
（2）图 8.4 是截取自底层模块 Digitron_TimeDisplay_module 的部分代码，
工作原理与实验六加法计数器中的类似：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
108
图 8.4 Digitron_TimeDisplay_module 核心代码
32-35：当要显示星期或者调整星期时，数码管 DIG1~DIG5 全灭，DIG6 显示当
前 Week 的值。
五、FPGA 管脚配置
图 8.5 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号、数码
管片选信号 DigitronCS_Out 和数码管输出显示信号 Digitron_Out 的配置方式与
实验六相同，DIG1~DIG6 依次显示“时、分、秒”，DIG6 也用于显示“星期”；复
位信号 RSTn 和星期显示信号 DispWeek_n 分别与 KEY0 和 KEY1 相连；调整开关
AdjtWeek、AdjtHour 、AdjtMin 依次与 SW0、SW2、SW1 相连； Buzzer_Out 信号
输出到蜂鸣器引脚。相应引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，
这里就不再赘述。
六、实验结果
当 SW2、SW1、SW0 拨至“UP”时，分别调整“时、分、星期”，且优先级从高
到
低排列为 SW0、SW2、SW1；KEY1 按下时 DIG1~DIG5 灭，DIG6 显示“星期”；KEY0
按下时时钟复位，“时、分、秒、星期”置为“00、00、00、1”；另有整点报时功
能。
图 8.6 显示当前时刻为 3 点 10 分 33 秒，其他功能请自行验证。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
109
图 8.5 多功能数字钟 Pin Planner
图 8.6 多功能数字钟实验结果
七、思考与拓展
（1）自行设计程序或查阅相关资料，实现以下功能：①显示“年-月-日”；②
“定时闹钟”功能。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
110
第三篇 综合性实验设计与实现
实验一 PWM
一、实验设计目标
（1）编写程序，使用 FPGA 产生脉冲调制（PWM）信号，且信号的周期和占空
比可通过按键调节。
（2）通过此实验学习“按键消抖”的基本方法。
二、实验设计思路
PWM 信号可用于控制步进电机的工作，图 1.1 是一个 PWM 信号的示意图。这个
脉冲的周期为 Period，宽度为 1 的那段时间称为脉冲宽度，占空比定义为高电平
信号占整个脉冲周期的百分比，即：
uty 100%
eriod
D
P
= 
脉冲宽度 占空比
周期 （1.1）
脉冲
宽度
周期 Period
PWM
图 1.1 一个 PWM 信号
要产生这样的 PWM 信号，基本思想就是使用一个计数器，当计数值 Cnt1 小于
脉冲宽度时，让 PWM 信号为 1；当 Cnt1 大于等于脉冲宽度时，让 PWM 信号为 0；
当 Cnt1 的值等于 Period-1 时，计数器复位，Cnt1 变为 0。循环往复便产生了一
个连续的 PWM 信号。
该 PWM 信号发生器系统由占空比、周期调整模块，PWM 信号产生模块和数码管
显示模块组成，图 1.2 是该系统的示意图。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
111 按键
消抖
模块
占空比、周期
调整模块U1
AddDuty_In
SubDuty_In
AddPeriod_In
SubPeriod_In
PWM信号
产生
模块U2
Duty
Count_P
数码管显示
模块U3
Count_D
Digitron_Out
DigitronCS_Out
PWM_Out
Count_D_Display
Count_P_Display
图 1.2 PWM 信号发生器示意图
占空比、周期调整模块用于调整 PWM 信号的占空比 Duty 和周期 Period，设置
四个按键开关，分别控制占空比增加、占空比减少、周期增加和周期减少。输出
信号 Duty 用于控制 PWM 波的占空比，取值范围为 0~100；Count_P 内存储了一个
数值，用于表征周期 Period。需要注意的是，当按下一次按键开关时，FPGA 可能
识别到多次操作或未识别到操作，所以，U1 模块内增加“按键消抖模块”用于准
确识别按键操作。
PWM 信号产生模块用于产生 PWM 信号。Count_D 内存储了一个数值，用于表征
脉冲宽度，计算公式为
Count D Duty Count P _ * _ 100 =  ( )
 （1.2）
U2 模块内有一个计数器 Cnt1，按照前文提到的基本思想，比较 Cnt1 和 Count_P、
Count_D 的数值，即可产生所需的 PWM 波。
数码管显示模块用于显示当前 PWM 信号的 Duty、Count_P 和 Count_D，便于观
察验证实验结果。因数码管个数限制，增加开关信号 Count_D_Display 与
Count_P_Display 用于切换数码管界面，这与第二篇的实验八中的思想相同。
三、功能模块图与输入输出引脚说明
该工程较包含顶层模块 pwm 与底层模块 Duty_Period_Adjust_module、
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
112
PWM_Generate_module、Digitron_NumDisplay_module，底层模块依次对应于图 1.2
的 U1~U3。图 1.3 是使用 Quartus 生成的顶层文件的 BSF 图，整个工程的模块功能
图参考图 1.2 即可。下面介绍一下顶层模块各主要引脚的功能：
图 1.3 PWM 实验顶层文件 BSF 图
（1）CLK：50MHz 的时钟信号输入。
（2）RSTn：复位输入信号。当 RSTn 为低电平时，PWM 信号的周期、占空比分
别置为 5ms 和 50%。
（3）AddDuty_In、SubDuty_In、AddPeriod_In、SubPeriod_In：按键开关输
入信号。依次控制占空比增加、占空比减少、周期增加和周期减少，每按一下，
相应参数变化一次。
（4）Count_D_Display、Count_P_Display：拨动开关输入信号，高电平有效，
分别控制数码管显示 Count_D 和 Count_P。
（5）Digitron_Out、DigitronCS_Out：分别为七段数码管的显示输出信号和
扫描驱动信号，与第一篇的实验六中相应引脚功能相同，不再赘述。
（6）PWM_LED_Out：U2 模块产生的 PWM 信号，输出到 LED 灯，共有一位总线。
因为 PWM 信号的平均直流值和占空比是成比例的，可以通过 LED 灯的亮度变化来
定性观察 PWM 信号的占空比的变化情况。
（7）PWM_EPI_Out：与（6）相同，也是所产生的 PWM 信号，输送到 Pocket
Instrument 中，定量观察 PWM 信号。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
113
四、程序设计
（1）图 1.4 是截取自底层模块 PWM_Generate_module 的部分代码：
图 1.4 PWM_Generate_module 核心代码
15：计算 Count_D，见公式（1.2）。
29-32：使用一个简易的计数器 Cnt1，通过比较 Cnt1 与 Count_D 的值，决定
信号 PWM_Out 电平的高或低。
（2）图 1.5 是截取自“消抖模块”Jitter_Elimination_module 的部分代码：
图 1.5 Jitter_Elimination_module 核心代码
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
114
8-9：定义按键输入信号和按键输出信号。
22-26：neg2 存储上一个时钟周期时 Button_In 的状态，neg1 存储这个时钟周
期时的状态，当 Button_In 从 1 变为 0 时，Button_Out 置为 1，随后又变回 0。也
就是说，Button_Out 只有在按键按下的那一刻为 1。
五、FPGA 管脚配置
图 1.6 是使用 Quartus 生成的 Pin Planner 管脚图，CLK、DigitronCS_Out 和
Digitron_Out 信号已经多次用到，不再赘述；复位输入信号 RSTn 与开发板上的
SWO 相连；AddDuty_In、SubDuty_In、AddPeriod_In、SubPeriod_In 输入信号分
别与开发板上的 KEY3~KEY0 相连；Count_D_Display、Count_P_Display 输入信号
分别与开发板上的 SW1、SW2 相连；输出信号 PWM_LED_Out 送到 LED0；PWM_EPI_Out
送到开发板上侧的 I/O 通道“A6”中，通过“A6”口送往 Pocket Instrument。引
脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不再赘述。
图 1.6 PWM 实验 Pin Planner

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
115
六、实验结果
本实验使用 Pocket Instrument 观察 PWM 波形，使用 LED0 定性观察 PWM 波的
占空比变化情况，使用数码管显示 Duty、Count_D 和 Count_P 的值。表 1.1 和表
1.2 分别是在调节 PWM 波时信号 Duty 和信号 Count_P 可能出现的数值，十六进制
数值即数码管上所显示的数值,表 1.2 还列出了相应的 PWM 波的频率。
表 1.1 Duty 信号数值
十进制数值 00 10 20 30 40 50 60 70 80 90 100
十六进制数值 00 0A 14 1E 28 32 3C 46 50 5A 64
表 1.2 Count_P 信号数值
十进制
（
3
10
）
50 100 150 200 250 300 350 400 450 500
十六进制
值
C350 186A0 249F0 30D40 3D090 493E0 55730 61A80 6DDD0 7A120
PWM 的
频率（Hz）
1000 500 333 250 200 167 143 125 111 100
图 1.7 是使用 EPI 观察到的初始状态时的 PWM 波形，初始状态时，PWM 信号的
周期、频率、占空比分别为 5ms、200Hz 和 50%，和图 1.7 中波形参数吻合。当按
下按键 SW3~SW0 后，波形、LED0 的亮度、数码管上的数值都会有一定变化，请结
合程序及表 1.1、表 1.2 自行验证。
七、思考与拓展
（1）请仔细阅读代码，计算 PWM 信号的周期的可调范围，并与实际结果比对。
（2）请参照表 1.1，列出当 PWM 信号的频率固定为 200Hz 时，Count_D 可能出
现的数值。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
116
图 1.7 PWM 波形
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
117
实验二 DA 及 DDS
实验 2.1 DA 输出实验
一、实验设计目标
编写程序，使用 FPGA 驱动 DA 芯片，输出锯齿波。
二、实验设计思路
任意复杂的数字电路都可以使用 FPGA 实现，但当关联上模拟信号时，就需要
AD、DA 芯片作为转换器件。AD 是把模拟信号转变成数字信号，再送给 FPGA 做数
字算法处理；DA 则是将 FPGA 处理过后的数字信号转变成模拟信号。
本实验设计使用 FPGA 驱动 DA 芯片，输出锯齿波。由 FPGA 向 DA 芯片输入一个
数字值，经过转换后输出相应的模拟值，改变输入的数字值便可得到幅度变化的
模拟信号输出，形成锯齿波。实验的关键在于编写 DA 的驱动程序和控制送入 DA
的数字值。
为方便实验，直接购买了一块集成了 DA 芯片（AD9708）、滤波器、放大器等器
件的高速并行 AD/DA 集成板。AD9708 是 8 位、125MSPS 的并行 DA 转换芯片，内置
1.2V 参考电压，差分电流输出；DA 集成板上有九个输入端和一个输出端（输入时
钟 DACLK、数据输入 DADB7~DADB0 和数据输出 DA OUT）。图 2.1 是该芯片的工作时
序图，图 2.2 是截取自芯片原理图上的部分参数说明。可以看出，DA 芯片的工作
由 CLOCK 信号控制，在每个 CLOCK 时钟的上升沿后并延时
PD t
时间后将 DA 转换结
果输出；CLOCK 时钟的工作脉宽
LPW t
最小为 3.5ns；每一个输入的数值必须满足最
小建立时间
S
t
和最小保持时间
H
t
才能被有效读取。下面介绍一下转换规律，式 2.1
是截取自原理图上的 DA 芯片输出模拟电压的计算公式，具体参数含义可自行查阅
原理图。
 2 255 25 {( ) } ( 6 32 ) V DAC CODE R R V DIFF LOAD SET REFIO = −    
 （2.1）
其中“DAC CODE”即为送入 DA 芯片的值，因 DA 集成板上还集成了滤波器、
反向放大器等器件，最终的计算公式可以等价于：
( ) max 255 data 256 −   =  2 输入的 输出的模拟电压 V
 （2.2）
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
118 Vmax
可通过 DA 集成板上的电位器旋钮调节，调节范围是-5V~5V（10Vpp）。当输入
的 8 位数据都为 1 时，输出电压近似为−Vmax
；当输入的 8 位数据都为 0 时，输出
电压近似为
Vmax
。这样就能根据输入的 data 控制输出信号的波形。
图 2.1 DA 芯片工作时序图
图 2.2 DA 芯片部分工作参数
三、功能模块图与输入输出引脚说明
该工程较为简单，仅包含顶层模块 DA，图 2.3 是使用 Quartus 生成的顶层文
件的 BSF 图。下面介绍一下顶层模块各引脚的功能：
图 2.3 DA 实验顶层文件 BSF 图
（1）CLK：50MHz 的时钟信号输入。CLK 时钟的周期为 20ns，满足 DA 芯片的
工作时钟 CLOCK 的要求，因而直接将 CLK 赋给 CLOCK。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
119
（2）RSTn：复位输入信号。当 RSTn 为低电平时，输出信号 DA_Data[7：0]恒
为“00000000”。
（3）DA_CLK：DA 工作时钟信号。输送到 DA 集成板中，即为图 2.1 中的 CLOCK
时钟信号。
（4）DA_Data：输送到 DA 集成板的数字值，共有八位总线。DA_Data[7：0]
分别对应与图 2.1 中的 DB7-DB0。
四、程序设计
图 2.4 是截取自顶层模块 DA 的部分代码：
图 2.4 DA 输出实验核心代码
13：给 DA_CLK 赋值。
18-27：使用一个简易的计数器 Count，改变送给 DA_Data 的数值。因共有八
位，取值范围介于 0~255 之间。
五、FPGA 管脚配置
图 2.5 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 时钟输入信号与开发
板上的 50MHz 的晶振时钟相连；复位输入信号 RSTn 与开发板上的 SWO 相连；DA_CLK
和 DA_Data[7：0]分别送到开发板上左侧的 I/O 通道中，再将 DA 集成板的相应引
脚与该 I/O 通道相连，数据流便从 FPGA 传送到了 DA 集成板中。引脚连接信息已
经在第一篇的 1.3 节中做过详细介绍，这里就不再赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
120
图 2.5 DA 输出实验 Pin Planner

六、实验结果
注意，除时钟信号和输入数据外，还需提供“+5V”电压和“GND”，DA 芯片才
能正常工作。因 Pocket Instrument 上可提供的电源功率不足，使用实验室的电
源给 DA 集成板供电。DA 集成板需要与 MINI_FPGA 开发板“共地”。
当开关 SW0 拨至“DOWN”时，DA 集成板上的“DA OUT”口输出稳定的高电压，
电压值可由电位器调节 ；当 SW0 拨至“UP”时，“DA OUT”口输出下行的锯齿波。
图 2.6 是使用 EPI 观察到的锯齿波图形。其他现象请自行验证。

图 2.6 DA 输出实验 Pin Planner
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
121
七、思考与拓展
（1）图 2.6 中的锯齿波电压在跳变点后是“从高变低”的，请结合式（2.2）
解释原因。
（2）当把图 2.6 中的波形放大时，可以看见在跳变点处有“毛刺”，当使用实
验室示波器显示波形时，则没有“毛刺”，请思考其中的原因。
（3）图 2.6 给出了波形的频率等参数，请结合程序，判断参数是否正确。
八、实验小结
使用 FPGA 驱动 DA 芯片工作的关键就在于编写它的时序驱动，本节实验使用的
是并行 DA，在时序上要求不高。本篇的实验三将涉及到串行 AD 芯片的时序驱动原
理。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
122
实验 2.2 DDS 实验
一、实验设计目标
（1）在学习了实验 2.1 的基础上，使用 FPGA 驱动 DA 芯片，设计一个直接数
字频率合成器（DDS）。要求能产生正弦波、方波和三角波，并且波形的频率可在
一定范围内调节。
（3）通过此实验初步学习使用 Altera 中的 IP 核生成 ROM 查询表的方法。
二、实验设计思路
DDS 信号源是能直接合成所需波形的一种频率合成器件，由频率合成器（相位
累加器、波形查询表）和数模转换器构成。波形合成的基本思想与实验 2.1 中锯
齿波的产生原理相同，只要控制送入数模转换器的数字值以一定规律周期性变化，
便能得到所需的波形。
图 2.7 是 DDS 器件的核心部分流程图，包含相位累加器和波形查询表。CLK 为
工作脉冲，KW 代表频率控制字。相位累加器内包含一个 N 位全加器，每来一个时
钟脉冲 CLK，相位累加器的输出结果 addr（N 位）就以步长 KW 递增。波形查询表
ROM 即为波形存储器，其内部存储了所需波形的一个周期内的 2
N个采样点的数据。
查询表把送入的地址信息 addr 映射成所需波形的数字幅度信号，即输出
Wave_Data。
DDS 合成公式为：
_
2
CLK
WAVE DATA N
f
f KW = 
 （2.3）
可以看出，当 CLK 的频率和 N 的值不变时，只要改变输入的频率控制字 KW，即可
改变输出波形的频率。
相位
累加器
（N比特）
波形查询
表ROM
KW
CLK
addr Wave_Data
图 2.7 核心部分流程图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
123
图 2.8 是本实验设计的 DDS 系统的示意图，包含频率控制字模块、波形选择模
块和数模转换模块。
频率
控制字
模块U1 波形
选择
模块U2
数模
转换
模块U3
SW_Sawtooth_In
KW
KW_Add_In
KW_Sub_In
SW_Square_In
SW_Sin_In
Wave
_Data
CLK
DA_CLK
DA_Data_Out
图 2.8 DDS 系统示意图
频率控制字模块是用于改变送往 U2 模块的 KW 信号的值。设置 2 个按键输入
KW_Add_In 和 KW_Sub_In，分别控制 KW 的增加和减少；U1 模块内部包含“按键消
抖”电路。该模块的工作原理与实验 2.1 节相同，这里不再赘述。
波形选择模块内部包含了相位累加器和三个波形查询表，分别为正弦波、方波
和三角波，功能如图 2.7 所示。设置 3 个开关输入 SW_Sin_In、SW_Square_In、
SW_Sawtooth_In，用于选择输出的波形。
数模转换模块的功能与实验 2.1 节相同，向 DA 集成板输送 DA_CLK 信号和
DA_Data_Out 信号，用于驱动 DA 芯片工作。
三、功能模块图与输入输出引脚说明
该工程包含顶层模块 DDS 与 底 层 模 块 frequency_adjust_module 、
choose_wave_module 和 dac_module，底层模块从左至右依次对应于图 2.8 中的
U1~U3。图 2.9 是使用 Quartus 生成的顶层文件的 BSF 图，整个工程的模块功能图
参考图 2.8 即可。下面介绍一下各主要引脚的功能：
（1）CLK：50MHz 的时钟信号输入。
（2）RSTn：复位输入信号。当 RSTn 为低电平时，KW 为 5，输出波形的频率约
为 61KHZ。
（3）KW_Add_In、KW_Sub_In。通过按键开关输入，分别控制 KW 的增加和减少。
每按一次，KW 的值相应变化一次。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
124
（4）SW_Sin_In、SW_Square_In、SW_Sawtooth_In：通过拨动开关输入，分别
图 2.9 DDS 实验顶层文件 BSF 图
控制系统输出正弦波、方波、三角波。从左至右优先级依次降低，均为高电平有
效。
（5）DA_CLK：DA 工作时钟信号。
（6）DA_Data：输送到 DA 集成板的数字值，共有八位总线。(5)(6)与实验 2.1
节相应信号功能相同。
四、程序设计
图 2.10 是截取自底层模块 choose_wave_module 的部分代码：
图 2.10 choose_wave_module 核心代码
36-41:调用了一个类型为 dds_sin_rom 的查询表。每个波形数据都存储于一个
的单元中，address 即为要输出的数据的单元地址；clock 为工作时钟；q 即为查
询表根据 address 信号映射出的数据。
五、FPGA 管脚配置
图 2.11 是使用 Quartus 生成的 Pin Planner 管脚图，CLK、RSTn、DA_CLK 和
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
125
DA_Data[7：0]信号的配置方式均与实验 2.1 中相应信号相同；KW_Add_In、
KW_Sub_In 分别与开发板上的 KEY0、KEY1 相连；SW_Sin_In、SW_Square_In、
SW_Sawtooth_In 分别与 SW1~SW3 相连。引脚连接信息已经在第一篇的 1.3 节中做
过详细介绍，这里就不再赘述。
图 2.11 DDS 实验 Pin Planner

六、实验结果
MINI_FPGA 开发板与 DA 集成板之间的连接方式与实验 2.1 节相同，使用实验
室的电源给 DA 集成板供电，使用口袋仪器的“示波器功能”观察 DA 集成板输出
的波形。当 SW1、SW2、SW3 分别拨至“UP”时，可看到正弦波、方波和三角波，
且 SW1、SW2、SW3 的优先级从左至右依次降低。按下 KEY1（KEY0）时，输出波形
的频率增加（减少），且频率的变化是介于一定范围内的。
图 2.12、2.13、2.14 分别是初始状态下使用 EPI 观察到的正弦波、方波、三
角波的波形。初始状态下，KW 值为 5，输出波形频率约为 61KHz，与图形吻合。其
他现象请自行验证。
七、思考与拓展
（1）用口袋仪器看到的方波的波形存在很多毛刺，当使用实验室示波器观察
时，“毛刺”现象大大改善，请思考毛刺产生及减少的可能原因。
（2）参考实验 2.1 节，自行编写程序，用数码管显示任意时刻的 KW 值，并通
过公式（2.3）计算此时的波形频率，然后与口袋仪器显示的结果相比较。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
126
（3）除使用 IP 核建立 ROM 表外，也可用 verilog 语言直接编写程序生成 ROM
表。感兴趣的同学可以自行阅读参考书籍，实现此功能。
图 2.12 正弦波波形

图 2.13 方波波形
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
127
图 2.14 三角波波形
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
128
实验三 AD
实验 3.1 AD 采样实验
一、实验设计目标
（1）编写程序，使用 FPGA 驱动 AD 采集器工作，并使用 SignalTap 显示得到
的数字信号的波形，进行对比。
（2）通过本实验学习 Altera 中嵌入式逻辑分析仪 SignalTap 的使用方法。
二、实验设计思路
本实验设计使用 FPGA 驱动 10 位串行 AD 芯片工作，将正弦模拟信号转化为数
字信号，并由 FPGA 接收该串行数据流后存储为并行数据，观察得到的数字信号的
波形。与实验二类似，AD 实验的关键在于编写 AD 芯片的驱动程序和正确接收 AD
采集器输出的串行数字信号。
为方便实验，直接购买了一块包含了 AD 芯片（TLC1543）、滤波器、放大器等
器件的串行 AD 集成板。TLC1543 是 10 位串行 AD 转换芯片，有三个输入端和一个 3
态输出端，分别为片选（CS）、输入/输出时钟（I/O CLOCK）、地址输入（ADDRESS）
和数据输出（DATA OUT）。
图 3.1 是该芯片工作于快速转换方式 1 时的工作时序图。
图 3.1 AD 芯片工作时序图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
129
可以看出，当 CS 变为低电平后，芯片被选中，但是 CS 拉低后需要等待一个设
置时间
su(cs)
t
才能响应其他控制输入信号，图 3.2 中（a）为设置时间
su(cs)
t
的示意图。
CS有效后，从I/O CLOCK端输入10个外部时钟信号。前一次转换的最高有效位（MSB）
在 CS 的下降边时被移到 DATA OUT 引脚上，剩下的 9 位在第 1~9 个 I/O CLOCK 信
号的下降边时被移出，在 I/O CLOCK 的第十个下降边时，DATA OUT 端被驱动为逻
辑低电平。在 I/O CLOCK 的前 4 个上升沿将 ADDRESS 端呈现的下一个转换周期的 4
位模拟通道选择位（MSB 在前）输入地址寄存器，这个地址选择 14 个输入（11 个
模拟输入和3个内部测试电压）中的1个，但ADDRESS也需满足一定的设置时间
su A( )
t
才能被有效读取，图 3.2 中（b）为设置时间
su A( )
t
的示意图。在第 4 个 I/O CLOCK
信号由高至低的跳变时，开始对由 ADDRESS 信号选择的通道的输入模拟量进行采
样，第 10 个 I/O CLOCK 信号的下降沿时，电路开始 AD 转换，并将 EOC（转换结束
端）拉低直到转换完成。然后 CS 拉高。每一次的 AD 转换也需要一定的时间，结
合 datasheet，最大为 21us。
(a) I/O CLOCK 设置和保持时间电压波形 (b)ADDRESS 设置和保持时间电压波形
图 3.2 部分参数示意图
图 3.3 是截取自芯片原理图上的部分参数说明。总结如下：
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
130
图 3.3 AD 芯片部分参数说明
（1）
(I/O CLOCK)
f MHz  2.1
，实验时，取
(I/O CLOCK)
T ns = 520
 （3.1）
（2）
( )
1.425
su cs
t s  
，实验时，取
( )
1.44
su cs
t s = 
 （3.2）
（3）
( )
100ns su A t 
，实验时，取
( )
120 su A t ns =
 （3.3）
（4）连续读完 10 位的数据后需要等待
21s
的时间才可以进行下一次数据的
读取。取
21 oonv t s = 
（3.4）
下面介绍一下转换规律，类似于实验 2.1 中 DA 转换公式，AD 转换公式如下，
其中，
Vmax
的值由送给 AD 集成板的基准电压决定：
max
data
=
V 1023
输入的模拟电压 输出的
 （3.5）
三、功能模块图与输入输出引脚说明
在理解了上述 AD 采集过程及转换规律后，设计 AD 采样系统如图 3.4 所示，包
含 AD 采集模块 U1 和数码管显示模块 U2。
U1 模块用于驱动 AD 芯片完成上述采集过程。AD 转换得到的数字信号以串行方
式经 DATA OUT 引脚送入 FPGA 中，即输入信号 AD_DigData_In；再经过 U1 模块内
的控制电路后存储为 10 位并行数据 Data_Out[9:0]输出；CS_Valid_Sig 信号用于
表征 CS 信号的下降沿是否有效（即
su cs ( )
t
是否满足条件），不送给 AD 芯片；AD_CSn、
AD_Clk、AD_Address 信号分别对应图 3.1 中各信号，输送到 AD 芯片上。
U2 模块用于显示经 U1 模块得到的并行数字信号 Data_Out。
AD采集
模块U1
数码管
显示
模块U2
AD_DigData_In
Data_Out
AD_CSn
AD_Clk
AD_Address
CS_Valid_Sig
Digitron_Out
DigitronCS_Out
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
131
图 3.4 AD 采样系统示意图
在 所 建 立 的 工 程 中 ， 包 含 顶 层 模 块 AD 与 底 层 模 块 AD_Data 、
Digitron_NumDisplay。底层模块依次对应于图 3.4 中的 U1、U2。此外，工程中还
包含一个底层模块 pll_100K，不参与 AD 采样过程，是通过 Altera 的 IP 核生成的，
用于产生频率为 100KHz 的时钟信号，作为时序分析仪（SignalTap）的工作时钟。
图 3.5 是使用 Quartus 生成的顶层文件的 BSF 图，下面介绍一下顶层模块各主要
引脚的功能：
图 3.5 AD 采样系统顶层文件 BSF 图
（1） CLK：50MHz 的基准时钟信号输入。周期为 20ns，用于产生一定的延时。
（2）RSTn：系统复位输入信号，低电平有效。复位后 AD 芯片不工作，
Data_Out[9:0]全为 0，数码管显示全为 0。
（3）AD_DigData_In：数据输入信号。与 AD 芯片的 DATA OUT 引脚相连，传送
串行数据。
（4）AD_CSn、AD_Clk、AD_Address：控制输出信号。分别与 AD 芯片的 CS、
I/O CLOCK、ADDRESS 相连。
（5）Data_Out：数据输出信号，共有 10 位总线。将 AD_DigData_In 中的串行
数据存储为并行数据。
（6）CS_Valid_Sig：片选有效标志位。当 AD_CSn 信号由高变低时，
CS_Valid_Sig信号由高变低；当距AD_CSn信号的下降沿一定时间后，CS_Valid_Sig
再置高，表明此时 AD_CSn 信号的下降沿有效。
（6）Digitron_Out、DigitronCS_Out：数码管的输出显示信号及片选信号。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
132
四、程序设计
图 3.6 是截取自底层模块 AD_Data 的部分代码，理解了此段程序则可以相应理
解该模块的所有程序：
图 3.6 AD_Data 代码
26-45：这是一种计数器的改变，加了一个 Cnt1_en，目的是制造精确的延时
时间。当 Cnt1_en 为 0 时，Cnt1 不计数；当 Cnt1_en 为 1 时，Cnt1 开始计数。此
计数器用于产生频率符合要求的 AD_Clk 信号，系统基准时钟 CLK 的周期为 20ns，
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
133
则得到的 AD_Clk 信号的周期为 520ns。计算方法为
2 13 20ns=520ns   。
148-155：计数器 Cnt2 用于产生准确的延时时间
su cs ( )
t
。当 Cnt2 为 71 时，延时
了 1440ns（
72 20ns 
），此时 AD_CSn 信号的下降沿有效，151 行将 CS_Valid_Sig
信号置为1；152行打开控制AD_Clk信号的计数器Cnt1；152行打开控制AD_Address
信号的计数器 Cnt3；154 进入下一个状态。
164：Addr 信号中存储了要送外 AD 芯片的 ADRESS 引脚的数值，AD_Address 信
号与 ADRESS 引脚相连，164 行控制以串行方式向 ADRESS 引脚送 Addr 信号的 MSB。
167-172：AD 芯片在 CS 的下降沿时将上次转换的数据的 MSB 移到 DATA OUT 引
脚中，AD_DigData_In 信号与 DATA OUT 引脚相连。所以，控制 FPGA 在时钟信号
AD_Clk 的第一个上升沿处，将 MSB 存入 Data_Out[9]中。
五、FPGA 管脚配置
图 3.7 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号、Digitron_Out
信号、DigitronCS_Out 信号的配置方式与之前实验相同；RSTn 信号接 SW0；AD_EOC
信号、AD_DigData_In 信号、AD_CSn 信号、AD_Clk 信号和 AD_Address 信号分别输
送到开发板上方的 I/O 通道中，继而与 AD 集成板的相应引脚相连；CS_Valid_Sig
信号和 Data_Out 信号用于在 SignalTap 中做时序分析使用，不需连接到外部引脚。
相应引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不再赘述。

图 3.7 AD 采样系统 Pin Planner

六、实验结果
在验证实验时，使用实验室电源向 AD 集成板提供“5V”电压，则式（3.5）中
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
134
的
Vmax
的值为 5V，AD 集成板、电源和 MINI_FPGA 开发板需要“共地”，使用口袋仪
器的“信号源”向 AD 芯片送入正弦信号，选择模拟输入端 AIN5。
（1）图 3.8 是使用口袋仪器产生的正弦信号的波形及参数说明。

图 3.8 AD 转换前的正弦信号
（2）图 3.9 是使用 SignalTap 观察到的经 AD 转换后的波形。新建一个
SignalTap 文件，命名为“stp1”，SignalTap 的工作时钟选择 100KHz，则每个采
样点的时间间隔为
10s
，取“2k”采样点，使用“Unsigned Line Chart”类型显
示 Data_Out[9:0]。在波形的 2 个峰值处插入时间条，左边的为设置为“主时间条”。
如图所示，3 个周期的时间长度为 6.01ms，则计算得到该正弦波的频率约为
499.2Hz，与输入的模拟信号吻合；峰值处的数据为 911，根据式（3.5）计算得到
的电压的峰值为 4.45V，略小于输入信号的峰值 4.5V，这是仪器本身的原因造成
的。
图 3.9 AD 转换后的波形图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
135
七、思考与拓展
（1）使用 SignalTap 观察波形的最低点的数据值，并根据式（3.5）计算相应
的模拟电压值，与口袋仪器所产生的正弦信号进行比较。
（2）参考 AD 芯片的 datasheet，修改程序中的 addr 信号值，将 AD 集成板的
输入地址更改为内部自测试电压的选择地址，观察并验证数码管所显示的数值。
（3）本节实验中 SignalTap 的工作时钟选择 100KHz，关于使用 IP 核生成分
频模块
实验 3.2 时序分析实验
一、实验设计目标
在完成了实验 3.1 的基础上，使用 SignalTap 对实验 3.1 节中的信号进行时序
分析，将分析结果与图 3.1 的 AD 芯片工作时序图进行对比。
二、实验过程
本实验是在实验 3.1 的基础开展的分析性实验，使用实验室的电源给 AD 集成
板提供“5V”电压，式（3.5）中的
Vmax
的值则为 5V，AD 集成板、电源和 MINI_FPGA
开发板需要“共地”，使用口袋仪器的“信号源”向 AD 芯片送入方波信号，选择
模拟输入端 AIN5。图 3.30 是使用口袋仪器产生的方波信号的波形及参数说明。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
136
图 3.30 方波信号参数说明
新建一个 SignalTap 文件，命名为“stp2”，工作时钟选择 50MHz 的系统基准
时钟，则每个采样点的时间间隔为
20ns
，取“8k”采样点。相关设置如图 3.31 所
示。

(a) 信号区 (b) 时钟及采样深度设置区
图 3.31 SignalTap 文件的相关设置

三、实验结果
（1）时序分析仪的工作频率为 50MHz，口袋仪器产生的方波频率为 20KHz，所
以，方波信号的一个周期内采集 2500 个点。因资源限制，SignalTap 的采样深度
设置为 8k，则屏幕上共能显示 AD 采样到的 3.2 个周期的方波信号。图 3.32 为其
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
137
部分截图。程序中，仅在 AD_Clk 信号的上升沿时将 AD_DigData_In 的当前值赋给
Data_Out 信号，其他时刻 Data_Out 的值保持不变，所以 Data_Out 信号的波形仅
在 AD_Clk 有脉冲时出现阶梯状的变化。
图 3.32 整体图
（2）图 3.33 是 AD_CSn 信号为低的一段时刻的时序放大图，通过此图可以简
单直观地感受 AD 芯片的控制信号之间的时序关系。以图 3.33 为参考时刻，图 3.34
截取了从 AD_CSn 信号的下降沿到第三个 AD_Clk 信号的上升沿的时序图，并在关
键时刻插上时间条，命名为①~⑦；图 3.35 截取了 AD_CSn 信号为低的一段时刻的
时序图，并在关键时刻插上时间条，命名为⑧；图 3.36 截取了位于 AD_CSn 信号
的两个下降沿内的一段时刻的时序图，并在关键时刻插上时间条，命名为⑨、⑩、
“11”。
图 3.33 时序分析图 1

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
138

图 3.34 时序分析图 2

图 3.35 时序分析图 3

 11
图 3.36 时序分析图 4

（3）为方便观察，将图 3.34~3.36 做一定处理，得到图 3.37。下面对时间条
①~⑩、“11”进行分析。

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
139
 11
图 3.37 时序分析图 5

“①”是“主时间条”。在此刻，AD_CSn 信号由高至低，AD_Clk、AD_DigData_In、
AD_Address 信号均不响应，分别保持为“0、0、1”。
“②”距离“①”延时 300ns。对于 AD 芯片来说，DATA OUT 引脚在 CS 为高时
处于高阻抗状态，而当 CS 为低时处于激活状态。一旦 CS 的下降沿有效（延时一
定时间），按照前一次转换结果的 MSB 值将 DATA OUT 从高阻抗状态转变成相应的
逻辑电平。所以，此刻 AD_DigData_In 信号由低变高，表明上一次 AD 转换结果的
MSB 为高电平。
“③”距离“①”延时
1.44s
。在此刻 CS_Valid_Sig 信号由低变高，表明距
离 AD_CSn 信号的下降沿已有 1440ns（
72 20ns 
），符合设置的
su cs ( )
t
，见式（3.2）。
“④”比“⑤”超前 120ns。本实验选择模拟通道 AIN5，所以送给 AD 芯片的
ADDRESS 引脚的值为“0101”。在此刻 AD_Address 信号由高变低，即将“0101”的
最高有效位“0”送给 ADDRESS 引脚。且 120ns 符合设置的
su A( )
t
，见式（3.3）。
“⑤”距离“③”延时 260ns。在此刻 AD_Clk 信号由低变高，即将第一个时
钟上升沿送给 I/O CLOCK 引脚，且 260ns 符合设置的
(I/O CLOCK)
T
，见式（3.1）。同
时，在此刻 Data_Out[9]信号由低至高，即在第一个时钟的上升沿将 AD_DigData_In
信号的当前值（MSB）赋给 Data_Out[9]。
“⑥”距离“⑤”延时 260ns。在此刻 AD_Clk 信号由高变低，即将第一个时
钟下降沿送给 I/O CLOCK 引脚。且 260ns 符合设置的
(I/O CLOCK)
T
，见式（3.1）。
“⑦”是在 AD_Clk 信号的第二个下降沿后延时 20ns（时序图的顶栏的 1 小格）
的时间条。对于 AD 芯片来说，上一次转换结果的低 9 位在第 1~9 个 I/O CLOCK 信
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
140
号的下降沿时被移至 DATA OUT 引脚。所以，理论上来说，AD_DigData_In 信号应
在“⑦”时刻条前面的 AD_Clk 下降沿时由高变低，但图 3.37 中延时了 20ns，这
是由 SignalTap 的采样时钟的离散性造成的。在实际中，DATA OUT 引脚的输出信
号并非是延时了 20ns 才发生变化，但 SignalTap 所能采集到的最近的点就是延时
了 20ns 的时刻。
“⑧”距离“①”延时
6.64s
。此刻为第十个 AD_Clk 信号的下降沿,根据式
（3.1）和式（3.3），计算“①”与“⑧”之间的延时：
-
t s ns s =1.44 +10 520 =6.64    ① ⑧ （3.6）
计算结果与时序图吻合。此外，对于 AD 芯片来说，第 10 个 I/O CLOCK 信号的下
降沿时，电路开始 AD 转换，并将 EOC（转换结束端）拉低直到转换完成，所以，
在此刻 AD_EOC 输入信号由高变低。
“⑨”距离“⑧”延时 20ns。这与 AD_Data 模块中 239-251 行代码相吻合， 当
AD_Clk 信号的第十个下降沿到来后，AD_CSn 信号将在下一个系统基准时钟 CLK 的
上升沿时由低变高。且 AD_CSn 信号的上升沿将禁止 AD 芯片的三个输入端。
“⑩”距离“①”延时
17.74s
。此时，AD_EOC 信号由低至高，表明此次 AD
转换完成。
17.74s
是此次转换过程实际所用时间。
“11”距离“⑨”延时
21.06s
。此刻为下一次 AD 采样过程中 AD_CSn 信号的
下降沿。根据式（3.4），
21 oonv t s = 
，多出的 60ns 实际上也是符合代码的，延时
过程与“⑨”“⑧”之间的延时过程相似。
“11”距离“①”延时
27.72s
，此即为包括采集与转换在内的整个 AD 采样过
程的周期。根据式（3.1）、（3.3）、（3.4），计算一次 AD 采样的周期：
t s ns s s =1.44 +10 520 21 =27.64     + （3.7）
多出的 80ns 是符合代码的，前面已经介绍过。
综上，实际 AD 采样的频率为 36.075KHz，时序与设计吻合。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
141

实验四 UART 串行通信
实验 4.1 UART 串口接收实验
一、实验设计目标
（1）在 FPGA 中实现串口协议，通过 MINI_FPGA 开发板上的“UART2USB”口接
收从计算机发来的数据。
二、实验设计思路
UART 串口是一种类似于 USB、VGA 的接口，有固定的引脚和通信协议。使用 FPGA
实现串口通信，可分为“计算机发送数据给 FPGA”和“FPGA 发送数据给计算机”
两部分。本节为串口接收实验，使用 FPGA 接收从计算机发来的数据。
进行串口接收实验首先需要了解串口的接收时序，图 4.1 为接收一帧数据时的
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
142
简单示意图。串口接收只使用一条数据线 RX，特点如下：
RX 开始位 D0 D1 D2 D3 D4 D5 D6 D7 校验位 停止位
图 4.1 串口接收时序示意图
（1）当 RX 产生了一个下降沿后才开始一帧数据的接收，接收到的第一位为开
始位。
（2）一帧周期内有 11 个时钟，第一个时钟是开始位，2~9 个时钟为数据位，
并且数据是从低位到高位的接收的。
（3）串口的接收时钟频率取决于它的波特率，常用的波特率是有几个固定值
的。本实验的波特率选用 9600bps，表明 1 秒内传送 9600 位数据，则一位数据的
周期为：
1
T =
波特率 （4.1）
可以看出，进行串口接收实验的关键在于准确读取 RX 上的数据，需做到以下
两点：①判断什么时候 RX 开始接收一帧数据，即判断开始位；②判断什么时候读
取 D0~D7 上的数据，即判断数据位。
为实现第①点，借鉴实验一 PWM 实验中的“消抖程序”的思想检测 RX 线上的
信号，在 RX 信号产生了一个下降沿后才启动一帧数据的接收；并且，为保证每一
次检测到的都是开始位，必须确定在一次接收中经过了 11 个时钟后才开始下一帧
数据的接收，这可以通过编程实现。
对于第②点，为保证数据的准确，应在数据位的正中间读取数据。图 4.2 为读
取数据的简单示意图，当 BPS_CLK 信号为高时，读取 RX 线上的数据，BPS_CLK 信
号的高电平出现的频率应为 9600Hz。设计一个计数器 Count_BPS，将 50MHz 的系
统基准时钟进行分频，分频数为：
50000000 9600-1=5207  (4.2)
当 Count_BPS 计数到 2604 时，令 BPS_CLK 信号为高电平，其他时刻都置低，这样
便能在一个接收时钟的正中间读取数据。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
143
RX 开始位 D0 D1 D2 D3 D4 D5 D6 D7 校验位 停止位
BPS_CLK
图 4.2 数据读取示意图
三、功能模块图与输入输出引脚说明
图 4.3 是本实验设计的串口接收系统的示意图，包含开始位检测模块 U1、波
特率控制模块 U2、接收控制模块 U3 和 LED 显示模块 U4。
开始位
检测
模块U1
波特率
控制
模块U2
接收
控制
模块U3
LED
显示
模块U4
RX_Pin_In neg_sig
Count_Sig
BPS_CLK
RX_En_Sig
RX_Data
RX_Done_Sig
LED_Out
图 4.3 串口接收系统示意图
开始位检测模块用于检测一帧数据的开始位，功能如前所述。RX_In 与串口的
RX 线相连，在没有数据传输时，RX 线上为高电平；neg_sig 为“下降沿标志位”，
当检测到 RX_In 的下降沿时，neg_sig 信号被置为 1，其他时刻为 0。
波特率控制模块内包含一个计数器 Count_BPS，功能如前文所述。BPS_CLK 为
使能时钟信号，控制何时读取数据。Count_Sig 为计数标志位，当一帧数据开始时，
Count_Sig 被置为 1，此时计数器 Count_BPS 才能开始计数；当一帧数据接收完毕
后，Count_Sig 被置为 0，计数器 Count_BPS 停止工作。
接收控制模块从 RX_En_Sig 信号上的数据帧中读取出数据位，将串行数据转换
为并行 8 位数据并存储于 RX_Data 中。当一帧数据接收完毕时，“接收完成标志位”
RX_Done_Sig 被置为 1。
LED 显示模块将接收到的八位数据输送到 LED 灯上。
在 FPGA 中实现此系统，工程包含顶层模块 DA 与底层模块 detect_module、
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
144
rx_bps_module、rx_control_module、LED_display_module，底层模块从左至右
依次对应于图 4.3 中的 U1~U4。图 4.4 是使用 Quartus 生成的顶层文件的 BSF 图。
下面介绍一下顶层模块输入输出引脚的功能：
图 4.4 串口接收实验顶层文件 BSF 图
（1）CLK：50MHz 的时钟信号输入。
（2）RSTn：复位输入信号，低电平有效。当 RSTn 信号为 0 时，LED_Out 全为
0。
（3）RX_In：接收输入信号。连接到串口的 RX 线。
（4）LED_Out：输送到 LED 灯，共有八位总线。LED_Out [7：0]分别存储了一
帧数据的 MSB 至 LSB 位。
四、程序设计
串口接收程序中的大部分代码功能已在前面的实验中使用过，容易理解，此处
仅简单说明。
（1）图 4.5 是截取自底层模块 rx_control_module 的部分代码：
图 4.5 rx_control_module 核心代码
49-54：数据位存储。计算机发送数据时，是先发（最低有效位）LSB 的，53
行代码依次将 RX_In 信号的值存储于 rData[0]~rData[7]中，rData 的值最终将赋
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
145
给 RX_Data。
（2）图 4.6 是根据 rx_control_module 模块中的代码并结合图 4.2 画出的过
程示意图，State 信号内寄存当前状态值，最后的“12→13→0”的状态改变是立
刻发生的，与前面不同，请结合程序理解。时序设计满足串口通信协议。
RX 开始位 D0 D1 D2 D3 D4 D5 D6 D7 校验位 停止位
BPS_CLK
State
0 1 2 3 4 5 6 7 8 9 10 11 12 13 0
图 4.6 接收过程示意图
五、FPGA 管脚配置
图 4.7 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号与开发板上的
50MHz 的晶振时钟相连；RSTn 信号与 SWO 相连；LED_Out[7：0]分别与 LED7~LED0
相连；RX_En_Sig 信号与 SW1 相连；RX_In 信号与 F14 管脚相连，串口接收引脚在
第一篇的 1.3.7 节中已经做过介绍。其他引脚连接信息已经在第一篇的 1.3 节中
做过详细介绍，这里就不再赘述。
图 4.7 串口接收实验 Pin Planner

六、实验结果
串口通信时需要通过“串口接口”传输数据，但 MINI_FPGA 开发板内部已经集
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
146
成了 USB 转串口的功能，所以，直接使用 2 根 USB 数据线分别将开发板上的 JTAG
接口和 UART2USB 接口与计算机相连，在计算机上安装一个“串口调试助手”，即
可进行实验。
图 4.8 是使用“串口调试助手”发送数据“AB”的参数界面，实验前需下载串
口的驱动程序并安装，若出现图 4.8 中红框①的内容，则表明驱动安装成功。波
特率选择 9600，选择 8 位数据位，1 位校验位和 1 位停止位。计算机向 FPGA 发送
“AB”，选择“显示发送”，在显示区可以看到发送的“AB”。

显示区
图 4.8 “串口助手”参数设置
图 4.9 是使用 FPGA 接收“AB”数据的实验结果。LED7~LED0 的状态依次为“亮、
灭、亮、灭、亮、灭、亮、亮”，即 RX_Data[7:0]的值为“10101011”，换成 16 进
制为“AB”，接收到的数据与所发送的相同。

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
147
图 4.9 串口接收实验结果

七、思考与拓展
（1）图 4.6 中，State 的值在发生“12→13→0”的变化时，是随着基准时钟
CLK 的上升沿而变化的，也就是说，停止位的持续时间只有半个周期，但依然得到
了正确的实验结果，请结合程序从“实际有用数据”的角度解释其原因。
（3）在使用“串口调试助手”时，若选择“无校验位”，实验现象是怎样的？
请结合程序及“一帧数据”的格式解释其原因。
实验 4.2 UART 串口发送实验
一、实验设计目标
（1）在 FPGA 中实现串口协议，通过 MINI_FPGA 开发板上的“UART2USB”口向
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
148
计算机发送数据。
二、实验设计思路
在学习了实验 4.1 中 UART 串口接收实验的基础上，理解 UART 串口发送实验就
较为简单了。本实验设计使用 FPGA 向计算机重复发送六组数据“0A、0B、0C、0D、
0E、0F”，每隔 0.5 秒发送一组，在计算机上使用“友善串口助手”接收数据并验
证是否正确。
图 4.10 为发送一帧数据时的简单示意图。可以看出，串口的发送时序和接收
时序是一样的，而串口接收和发送的不同点就在于，接收是把数据从时序中提取
出来，发送是把数据添加到时序中去。
TX 开始位 D0 D1 D2 D3 D4 D5 D6 D7 校验位 停止位
图 4.10 串口发送时序示意图
同串口接收一样，进行串口发送实验首先需要产生一个 BPS_CLK 信号，然后根
据 BPS_CLK 实现 TX 的时序即可。以下为串口发送的简单步骤：
（1）由 TX 产生一个下降沿变化，作为一帧数据的开始，“开始位”时，TX 信
号置为 0。
（2）把要发送的数据按照先低位后高位的顺序一位一位送给 TX。
（3）“校验位”和“停止位”无操作，TX 信号置为 1。
（4）一帧数据发送完毕，等到下一次发送开始时，回到步骤（1）。
图 4.11 是本实验设计的串口发送系统的示意图，包含数据控制模块 U1、波特
率控制模块 U2 和发送控制模块 U3。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
149
波特率
控制
模块U2
发送
控制
模块U3
BPS_CLK
TX_Done_Sig
TX_Data
数据 TX_Pin_Out
控制
模块U1
TX_En_Sig
（Count_Sig）
图 4.11 串口发送系统示意图
数据控制模块内有一个计数器 Count，控制系统每隔 0.5 秒发送一次数据。
TX_Data 为要发送的 8 位并行数据；TX_En_Sig 为发送使能标志位，它的上升沿将
驱动模块 U2 开始产生 BPS_CLK 信号，同时驱动 U3 模块开始发送数据；TX_Done_Sig
为发送完成标志位，当一帧数据发送完毕后，TX_Done_Sig 信号被置
为 1，这将驱动 TX_En_Sig 信号变为 0 直到开始发送下一组数据。
波特率控制模块与实验 4.1 节串口接收实验中模块功能相同，U2 模块的输入
信号 Count_Sig 即为 U1 模块的输出信号 TX_En_Sig。
发送控制模块将 TX_Data 的值一位一位（LSB 先导）的送给 TX_Out 信号，当
一帧数据发送完毕时，TX_Done_Sig 被置为 1。
三、功能模块图与输入输出引脚说明
在 FPGA 中实现此系统，顶层模块为 tx_top，底层模块 data_control_module、
tx_bps_module、tx_control_module 从左至右依次对应于图 4.11 中的 U1~U3。图
4.12 是使用 Quartus 生成的顶层文件的 BSF 图。下面介绍一下顶层模块输入输出
引脚的功能：
图 4.12 串口发送实验顶层文件 BSF 图
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
150
（1）CLK：50MHz 的时钟信号输入。
（2）RSTn：复位输入信号，低电平有效。当 RSTn 信号为 0 时，TX_Out 恒为 1。
（3）TX_In：发送输出信号。连接到串口的 TX 线。
四、程序设计
串口发送程序中的大部分代码功能都已在实验 4.1 节串口接收实验中使用过，
容易理解，此处仅简单说明。图 4.13 是截取自底层模块 data_control_module 的
部分代码：
图 4.13 data_control_module 核心代码
28-32：isTX 是一个寄存器型信号，最终将赋给 TX_En_Sig。当一帧数据发送
完毕后，将 isTX 信号置为 0，禁止系统发送数据。
33-35：分频数 T05S 的值为 25000000，当距离上一次发送数据过去 0.5 秒后，
将 isTX 信号置为 1，开始新一轮数据的发送。
37-40：i 的取值范围是 0~5，用于从六组数据中选择一组发送。
五、FPGA 管脚配置
图 4.14 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号与开发板上的
50MHz 的晶振时钟相连；RSTn 信号与 SWO 相连；RX_In 信号与 F13 管脚相连，串口
发送引脚在第一篇的 1.3.7 节中已经做过介绍，这里就不再赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
151
图 4.14 串口发送实验 Pin Planner

六、实验结果
类似于串口接收实验，直接使用 2 根 USB 数据线分别将开发板上的 JTAG 接口
和 UART2USB 接口与计算机相连，在计算机上安装一个“串口调试助手”，即可进
行实验。
图 4.15 是使用“串口调试助手”接收数据“0A、0B、0C、0D、0E、0F”的结
果。波特率选择 9600，选择 8 位数据位，1 位校验位和 1 位停止位。选择“显示
时间”，在显示区可以看到接收到数据的时间。实验结果与程序设计相符。
图 4.15 串口发送实验结果

七、思考与拓展
（1）仔细阅读 tx_control_module 模块的程序，并参考图 4.6 绘出本实验中
发送过程的简单示意图。
（2）更改程序，实现发送完一组数据后立刻发送下一组数据的功能，并使用
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
152
“串口助手”验证实验。
八、实验小结
实验 4.1 与实验 4.2 节分别描述了串口接收实验与串口发送实验，但仍存在部
分限制。串口接收实验使用 LED 灯来显示接收到的数据，当计算机连续发送多个
数据帧时，速度是极快的，在 LED 灯上只能显示最后一帧数据结果。究其根本，
这里缺少了一个寄存器用于存储接收到的数据，并以某种肉眼可见的方式显示出
来。
本实验体系在实验 4.1 和实验 4.2 节程序的基础上，建立了一个工程，可接收
到计算机发来的数据并返还给计算机。该实验使用了 Altera 自带的 IP 核，建立
了两个 FIFO 存储器，将 FPGA 接收到的当前数据 B 存于接收存储器“rx_fifo”中，
当发送存储器“tx_fifo”中的上一个数据 A 发送完成后，再将 B 移入“tx_fifo”
中，同时“rx_fifo”接收下一个数据 C。请同学们在学习了实验 4.1 和实验 4.2
节的基础上，自行理解程序，学习 FIFO 存储器的使用。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
153
实验五 FIR 滤波器
一、实验设计目标
（2）在 FPGA 中实现 FIR 数字滤波器功能。
（2）通过本实验学习利用 Altera 中的 IP 核来建立 FIR 数字滤波器的方法。
二、实验设计思路
数字滤波技术用于从带有噪声的信号中提取所需的有效信号，并抑制不需要的
噪声信号。数字滤波器的输入输出均为数字信号。有限冲激响应（FIR）数字滤波
器是一个线性时不变系统，它在时域中的输入-输出关系为：
( ) ( ) ( ) ( ) ( )
0
N
k
y n x n h n x k h n k
=
= = − 
 （5.1）
可以看出，对于 FIR 数字滤波器，其基本结构是一个分节的延时线，每一节的输
出与相应系数加权累加，便得到滤波器的输出结果。
本实验设计使用 DDS 产生 2 个频率不同的正弦信号，叠加后经 FIR 低通滤波器
滤波，将滤波前与滤波后的信号分别送往 DA 芯片，观察并对比得到的模拟信号的
频谱图。图 5.1 为本次实验设计的 FIR 滤波系统的示意图，包含 DDS 模块、低通
滤波器模块和 DA 转换模块。
DDS
模块U1
低通
滤波器
模块U2
DA转换
模块U3
Sin6K_Out
[6:0]
DA_Data_In
[7:0]

DA_CLK
Sin24K_Out
[6:0]
＋
data_in
[7:0]
data_out
[22:0]
 DA_Data[7:0]
data_out
[22:15]
图 5.1 FIR 滤波器系统示意图
DDS 模块用于产生 2 个频率分别为 6.103KHz 和 24.414KHz 的正弦信号，工作
原理与实验 2.2 中 DDS 信号的产生方法相同，图 5.2 与图 5.3 分别为产生这 2 个
信号的 ROM 表的参数设置图。将 Sin6K_Out 信号和 Sin24K_Out 信号相加后作为低
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
154
通滤波器的输入信号 data_in，需要注意的是，Sin6K_Out 信号和 Sin24K_Out 信
号均为 7 位的，相加后的 data_in 信号为 8 位。
图 5.2 6.103KHz 正弦信号 ROM 表的参数设置
图 5.3 24.414KHz 正弦信号 ROM 表的参数设置
低通滤波器模块对输入的 data_in 信号进行算法处理，得到滤波后的信号
data_out。该 FIR 低通滤波器是使用 Quartus 自带的 IP 核来设置的，具体设置方
法参看本实验的“八”。图 5.4 为滤波器的参数设置图，截止频率为 10KHz，选用
“汉明窗”，采样率和阶数分别为 50000 和 50。需要注意的是，输入信号 data_in
的位数为 8 位，而输出信号 data_out 为 23 位，所以，截取 data_out 信号的高八
位再送至 DA 芯片（八位并行）中。
DA 转换模块对输入的 DA_Data_In 信号进行数模转换。使用实验 2.1 节中的 DA
集成板来完成 DA 转换，工作方法与驱动原理与实验 2.1 节 DA 输出实验相同，这
里不再赘述。需要注意的是，图 5.1 中的信号①和②均需进行 DA 转换，①得到的
是滤波后的波形，②得到的是滤波前的波形。
三、功能模块图与输入输出引脚说明
在 FPGA 中实现此系统，工程包含顶层模块 fir_top，底层模块 dds_module、
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
155
图 5.4 FIR 滤波器的参数设置
low_pass_filter1 和 DAC_module。底层模块依次对应于图 5.1 中的 U1~U3，系统
的整体功能模块图参考图 5.1 即可。此外，工程中还包含一个分频模块 pll_70K，
是通过 IP 核生成的，用于低通滤波器的时钟输入。图 5.5 是使用 Quartus 生成的
顶层文件的 BSF 图，下面介绍一下顶层模块各主要引脚的功能：
图 5.5 FIR 实验顶层文件 BSF 图
（1）CLK：50MHz 的基准时钟信号输入。用于分频。
（2）RSTn：系统复位输入信号，低电平有效。复位后 U1 模块输出信号全为 0，
送往 DA 集成板的输入信号恒为 0，根据实验 2.1 中的 DA 转换公式（2.2），DA 转
换结果保持高电平。
（3）DA_CLK：送往 DA 芯片的时钟引脚 CLOCK，向其提供时序。
（4）DA_Data：送往 DA 芯片的并行数据引脚，共有八位总线。DA_Data 内存
储的可能是滤波前的信号也可能是滤波后的信号。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
156
四、程序设计
DDS 模块与 DAC 模块在前面的实验中已经用到过，这里简单介绍下低通滤波器
的相关代码。图 5.6 是截取自顶层模块 fir_top 的部分代码：
图 5.6 fir_top 部分代码
59-67：定义了该低通滤波器的一些端口参数。
69-81：调用名为 U3 的低通滤波器元件并进行接口的连接。clk 是用于所有内
部 FIR 滤波器寄存器的时钟信号，频率选择 70KHz；“FIR 准备好信号”
ast_sink_valid，当 FIR 滤波器能在当前时钟周期接收数据时该信号置位，本实
验中该信号恒保持为“1”；“数据有效信号”ast_source_ready，当端口数据有效
时该信号置位，本实验中该信号恒保持为“1”；ast_sink_error 为“出错信号”，
标识在“信宿端”出现违背 Avalon-ST 协议的错误，本实验中该信号恒保持为“00”。
五、FPGA 管脚配置
图 5.7 是使用 Quartus 生成的 Pin Planner 管脚图，CLK 信号与开发板上的
50MHz 的晶振相连；RSTn 信号接 SW0；DA_CLK 和 DA_A[7：0]分别送到开发板上左
侧的 I/O 通道中，再将 DA 集成板的相应引脚与该 I/O 通道相连，连接方式与实验
2.1 节相同。相应引脚连接信息已经在第一篇的 1.3 节中做过详细介绍，这里就不
再赘述。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
157
图 5.7 FIR 滤波器实验 Pin Planner
六、实验结果
在验证实验时，使用实验室电源向 DA 集成板提供“5V”电压，DA 集成板、电
源和 MINI_FPGA 开发板需要“共地”，使用口袋仪器的“频谱分析仪”和“示波器”
功能观察实验结果。
（1）图 5.8 与图 5.9 分别为滤波前和滤波后的信号波形。滤波前的信号由频
率为 6.1KHz 和 24.4KHz 的正弦信号相加而成，滤波后得到了一个频率为 6.1KHz
的正弦信号。滤波器的截止频率为 10KHz,实验结果与实验设计吻合。

图 5.8 滤波前的信号波形

基于 FPGA 的数字实验指导书（MINI FPGA 版本）
158
图 5.9 滤波后的信号波形
（2）图 5.10~5.12 为使用“频谱分析仪”观察到的滤波前信号的频谱图，基
波频率为 24.45KHz。如频谱图 2 和 3 所示，滤波前信号包含两个主要的强度相近
的频率分量，分别为 6.12KHz 和 24.45KHz，它们的当前幅度分别为 1.55dBV 和
1.65dBV。

图 5.10 滤波前的信号频谱 1
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
159

图 5.11 滤波前的信号频谱 2

图 5.12 滤波前的信号频谱 3
（3）图 5.13~5.15 为使用“频谱分析仪”观察到的滤波后信号的频谱图，基
波频率为 6.12KHz。如频谱图 5 和 6 所示，滤波后信号的主频分量在 6.12KHz 处，
而在频率为 24.45KHz 处，幅度已降至-59.99dBV。
综上，低通滤波器实验结果基本吻合实验设计，实验效果良好。
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
160

图 5.13 滤波后的信号频谱 4

图 5.14 滤波后的信号频谱 5
基于 FPGA 的数字实验指导书（MINI FPGA 版本）
161

图 5.15 滤波后的信号频谱 6

七、思考与拓展
（1）本实验使用的 DA 芯片为并行八位数据的，所以 DA_Data_In 信号也必须
为八位。当将滤波器输出赋给 DA_Data_In 信号时，截取了它的高八位，请思考，
这样做对实验结果（如波形的峰峰值）有什么影响，当截取它的低八位时，实验
现象又是怎样的。
（2）使用 SignalTap 采集 data_in、data_out 等信号的值，观察未经过 DA 转
换的滤波前后的波形图，并参考实验 3.2 节时序分析的方法，对本实验中滤波器
的相关端口参数进行时序分析。
（3）调整示波器的纵坐标，放大观察图 5.9，会发现滤波后的波形图是由许
多小阶梯组成的，并不光滑，请结合实验 2.1 中的 DA 转换公式（2.2）与滤波后
送往 DA 芯片的实际值来解释其原因。